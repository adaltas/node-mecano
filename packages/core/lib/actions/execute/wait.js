// Generated by CoffeeScript 2.5.1
// # `nikita.execute.wait`

// Run a command periodically and continue once the command succeed. Status will be
// set to "false" if the user command succeed right away, considering that no
// change had occured. Otherwise it will be set to "true".   

// ## Example

// ```js
// const {status} = await nikita.execute.wait({
//   command: "test -f /tmp/sth"
// })
// console.info(`Command succeed, the file "/tmp/sth" now exists: ${status}`)
// ```

// ## Schema
var handler, schema;

schema = {
  type: 'object',
  properties: {
    'quorum': {
      type: ['integer', 'boolean'],
      description: `Number of minimal successful connection, 50%+1 if "true".`
    },
    'command': {
      type: 'array',
      items: {
        type: 'string'
      },
      description: `The commands to be executed.`
    },
    'interval': {
      type: 'integer',
      default: 2000,
      description: `Time interval between which we should wait before re-executing the
command, default to 2s.`
    },
    'code': {
      type: 'array',
      items: {
        type: 'integer'
      },
      description: `Expected exit code to recieve to exit and call the user callback,
default to "0".`
    },
    'code_skipped': {
      type: 'array',
      items: {
        type: 'integer'
      },
      default: [1],
      description: `Expected code to be returned when the command failed and should be
scheduled for later execution, default to "1".`
    },
    'stdin_log': {
      $ref: 'module://@nikitajs/core/lib/actions/execute#/properties/stdin_log'
    },
    'stdout_log': {
      $ref: 'module://@nikitajs/core/lib/actions/execute#/properties/stdout_log'
    },
    'stderr_log': {
      $ref: 'module://@nikitajs/core/lib/actions/execute#/properties/stderr_log'
    }
  },
  required: ['command']
};

// ## Handler
handler = async function({
    config,
    tools: {log}
  }) {
  var command, count, i, j, len, quorum_current, ref, run, status;
  // Validate parameters
  if (config.quorum && config.quorum === true) {
    config.quorum = Math.ceil(config.command.length / 2);
  } else if (config.quorum == null) {
    config.quorum = config.command.length;
  }
  quorum_current = 0;
  status = false;
  ref = config.command;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    command = ref[i];
    count = 0;
    if (quorum_current >= config.quorum) {
      break;
    }
    run = async() => {
      var succeed;
      count++;
      log({
        message: `Attempt #${count}`,
        level: 'INFO'
      });
      ({
        status: succeed
      } = (await this.execute({
        command: command,
        code: config.code || 0,
        code_skipped: config.code_skipped,
        stdin_log: config.stdin_log,
        stdout_log: config.stdout_log,
        stderr_log: config.stderr_log
      })));
      if (!succeed) {
        return new Promise(function(resolve, reject) {
          return setTimeout(function() {
            return run().then(resolve).catch(reject);
          }, config.interval);
        });
      }
      log({
        message: "Finish wait for execution",
        level: 'INFO'
      });
      quorum_current++;
      if (count > 1) {
        return status = true;
      }
    };
    await run();
  }
  return {
    status: status
  };
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    argument_to_config: 'command',
    schema: schema
  }
};
