// Generated by CoffeeScript 2.5.1
// # `nikita.krb5.delprinc`

// Remove a Kerberos principal and optionally its keytab.

// ## Example

// ```js
// const {status} = await nikita.krb5.delrinc({
//   principal: 'myservice/my.fqdn@MY.REALM',
//   keytab: '/etc/security/keytabs/my.service.keytab',
//   admin: {
//     principal: 'me/admin@MY_REALM',
//     password: 'pass',
//     server: 'localhost'
//   }
// })
// console.info(`Principal was removed: ${status}`)
// ```

// ## Schema
var handler, mutate, schema, utils;

schema = {
  type: 'object',
  properties: {
    'admin': {
      $ref: 'module://@nikitajs/krb5/src/execute#/properties/admin'
    },
    'keytab': {
      type: 'string',
      description: `Path to the file storing key entries.`
    },
    'principal': {
      type: 'string',
      description: `Principal to be created.`
    },
    'realm': {
      type: 'string',
      description: `The realm the principal belongs to.`
    }
  },
  required: ['principal']
};

// ## Handler
handler = async function({config}) {
  var status;
  if (/.*@.*/.test(config.admin.principal)) {
    // Normalize realm and principal for later usage of config
    if (config.realm == null) {
      config.realm = config.admin.principal.split('@')[1];
    }
  }
  if (!/^\S+@\S+$/.test(config.principal)) {
    config.principal = `${config.principal}@${config.realm}`;
  }
  // Prepare commands
  ({status} = (await this.krb5.execute({
    admin: config.admin,
    command: `getprinc ${config.principal}`,
    grep: new RegExp(`^.*${utils.regexp.escape(config.principal)}$`),
    metadata: {
      shy: true
    }
  })));
  if (status) {
    await this.krb5.execute({
      admin: config.admin,
      command: `delprinc -force ${config.principal}`
    });
  }
  if (config.keytab) {
    return (await this.fs.remove({
      target: config.keytab
    }));
  }
};

// ## Export
module.exports = {
  handler: handler,
  metadata: {
    global: 'krb5',
    schema: schema
  }
};

// ## Dependencies
utils = require('@nikitajs/engine/lib/utils');

({mutate} = require('mixme'));
