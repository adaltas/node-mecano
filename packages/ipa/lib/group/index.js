// Generated by CoffeeScript 2.5.1
// # `nikita.ipa.group`

// Add or modify a group in FreeIPA.

// ## Example

// ```js
// const {status} = await nikita.ipa.group({
//   cn: 'somegroup',
//   connection: {
//     url: "https://ipa.domain.com/ipa/session/json",
//     principal: "admin@DOMAIN.COM",
//     password: "mysecret"
//   }
// })
// console.info(`Group was updated: ${status}`)
// ```

// ## Schema
var handler, schema;

schema = {
  type: 'object',
  properties: {
    'cn': {
      type: 'string',
      description: `Name of the group to add or modify.`
    },
    'attributes': {
      type: 'object',
      default: {},
      description: `Attributes associated with the group to add or modify.`
    },
    'connection': {
      $ref: 'module://@nikitajs/network/src/http',
      required: ['principal', 'password']
    }
  },
  required: ['cn', 'connection']
};

// ## Handler
handler = async function({config}) {
  var base, data, error, output, result, status;
  if ((base = config.connection.http_headers)['Referer'] == null) {
    base['Referer'] = config.connection.referer || config.connection.url;
  }
  ({status} = (await this.ipa.group.exists({
    connection: config.connection,
    cn: config.cn
  })));
  // Add or modify a group
  ({data} = (await this.network.http(config.connection, {
    negotiate: true,
    method: 'POST',
    data: {
      method: !status ? "group_add/1" : "group_mod/1",
      params: [[config.cn], config.attributes],
      id: 0
    }
  })));
  output = {};
  status = false;
  if (data != null ? data.error : void 0) {
    if (data.error.code !== 4202) { // no modifications to be performed
      error = Error(data.error.message);
      error.code = data.error.code;
      throw error;
    }
  } else {
    output.result = data.result.result;
    status = true;
  }
  // Get result info even if no modification is performed
  if (!status) {
    ({result} = (await this.ipa.group.show(config, {
      cn: config.cn
    })));
    output.result = result;
  }
  return {
    status: status,
    result: output.result
  };
};

// ## Export
module.exports = {
  handler: handler,
  schema: schema
};
