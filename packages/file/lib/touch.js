// Generated by CoffeeScript 2.5.1
// # `nikita.file.touch`

// Create a empty file if it does not yet exists.

// ## Implementation details

// Status will only be true if the file was created.

// ## Output

// * `err`   
//   Error object if any.   
// * `status`   
//   Value is "true" if file was created or modified.   

// ## Example

// ```js
// const {status} = await nikita.file.touch({
//   ssh: ssh,
//   target: '/tmp/a_file'
// })
// console.info(`File was touched: ${status}`)
// ```

// ## Hooks
var handler, on_action, schema;

on_action = function({config, metadata}) {
  if (metadata.argument != null) {
    return config.target = metadata.argument;
  }
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'gid': {
      $ref: 'module://@nikitajs/file/lib/index#/properties/gid'
    },
    'mode': {
      $ref: 'module://@nikitajs/file/lib/index#/properties/mode'
    },
    'target': {
      oneOf: [
        {
          type: 'string'
        },
        {
          typeof: 'function'
        }
      ],
      description: `File path where to write file or a function that returns a valid file
path.`
    },
    'uid': {
      $ref: 'module://@nikitajs/file/lib/index#/properties/uid'
    }
  },
  required: ['target']
};

// ## Handler
handler = async function({
    config,
    tools: {log}
  }) {
  var status;
  ({status} = (await this.call(async function() {
    var exists;
    log({
      message: `Check if target exists \"${config.target}\"`,
      level: 'DEBUG'
    });
    ({exists} = (await this.fs.base.exists({
      target: config.target
    })));
    if (!exists) {
      log({
        message: "Destination does not exists",
        level: 'INFO'
      });
    }
    return !exists;
  })));
  // if the file doesn't exist, create a new one
  if (status) {
    await this.file({
      content: '',
      target: config.target,
      mode: config.mode,
      uid: config.uid,
      gid: config.gid
    });
  } else {
    // todo check uid/gid/mode
    // if the file exists, overwrite it using `touch` but don't update the status
    await this.execute({
      command: `touch ${config.target}`,
      metadata: {
        shy: true
      }
    });
  }
  return {};
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  metadata: {
    schema: schema
  }
};
