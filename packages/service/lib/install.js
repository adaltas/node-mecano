// Generated by CoffeeScript 2.5.1
// # `nikita.service.install`

// Install a service. Yum, Yay, Yaourt, Pacman and apt-get are supported.

// ## Options

// * `arch_chroot` (boolean|string)   
//   Run this command inside a root directory with the arc-chroot command or any
//   provided string, require the "rootdir" option if activated.
// * `cache` (boolean)   
//   Cache the list of installed and outpdated packages.
// * `cacheonly` (boolean)   
//   Run the yum command entirely from system cache, don't update cache.
// * `code_skipped` (integer|array)   
//    Error code to skip when using nikita.service.
// * `installed`   
//   Cache a list of installed services. If an object, the service will be
//   installed if a key of the same name exists; if anything else (default), no
//   caching will take place.
// * `name` (string)   
//   Package name, required unless provided as main argument.
// * `outdated`   
//   Cache a list of outdated services. If an object, the service will be updated
//   if a key of the same name exists; If true, the option will be converted to
//   an object with all the outdated service names as keys; if anything else
//   (default), no caching will take place.
// * `rootdir` (string)   
//   Path to the mount point corresponding to the root directory, required if
//   the "arch_chroot" option is activated.
// * `pacman_flags` (array)
//   Additionnal flags passed to the `pacman -S` command.
// * `yaourt_flags` (array)
//   Additionnal flags passed to the `yaourt -S` command.
// * `yay_flags` (array)
//   Additionnal flags passed to the `yay -S` command.

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Indicates if the service was installed.   

// ## Example

// ```js
// require('nikita')
// .service.install({
//   ssh: ssh,
//   name: 'ntp'
// }, function(err, {status}){
//   console.info(err || "Package installed: " + status ? 'yes' : 'no');
// });
// ```

// ## Source Code
var string;

module.exports = function({metadata, options}) {
  var cacheonly, flag, i, j, k, l, len, len1, len2, ref, ref1, ref2;
  this.log({
    message: "Entering service.install",
    level: 'DEBUG',
    module: 'nikita/lib/service/install'
  });
  if (typeof metadata.argument === 'string') {
    // Options
    if (options.name == null) {
      options.name = metadata.argument;
    }
  }
  if (options.cache) {
    if (options.installed == null) {
      options.installed = this.store['nikita:execute:installed'];
    }
  }
  if (options.cache) {
    if (options.outpdated == null) {
      options.outpdated = this.store['nikita:execute:outpdated'];
    }
  }
  cacheonly = options.cacheonly ? '-C' : '';
  if (options.pacman_flags == null) {
    options.pacman_flags = [];
  }
  ref = options.pacman_flags;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    flag = ref[i];
    if (/^-/.test(flag)) {
      continue;
    }
    if (flag.length === 1) {
      options.pacman_flags[i] = `-${flag}`;
    }
    if (flag.length > 1) {
      options.pacman_flags[i] = `--${flag}`;
    }
  }
  if (options.yay_flags == null) {
    options.yay_flags = [];
  }
  ref1 = options.yay_flags;
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    flag = ref1[i];
    if (/^-/.test(flag)) {
      continue;
    }
    if (flag.length === 1) {
      options.yay_flags[i] = `-${flag}`;
    }
    if (flag.length > 1) {
      options.yay_flags[i] = `--${flag}`;
    }
  }
  if (options.yaourt_flags == null) {
    options.yaourt_flags = [];
  }
  ref2 = options.yaourt_flags;
  for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
    flag = ref2[i];
    if (/^-/.test(flag)) {
      continue;
    }
    if (flag.length === 1) {
      options.yaourt_flags[i] = `-${flag}`;
    }
    if (flag.length > 1) {
      options.yaourt_flags[i] = `--${flag}`;
    }
  }
  if (!options.name) {
    // Validation
    throw Error(`Invalid Name: ${JSON.stringify(options.name)}`);
  }
  // Start real work
  this.log({
    message: `Install service ${options.name}`,
    level: 'INFO',
    module: 'nikita/lib/service/install'
  });
  // List installed packages
  this.system.execute({
    unless: options.installed != null,
    cmd: `if command -v yum >/dev/null 2>&1; then
  rpm -qa --qf "%{NAME}\n"
elif command -v pacman >/dev/null 2>&1; then
  pacman -Qqe
elif command -v apt-get >/dev/null 2>&1; then
  dpkg -l | grep \'^ii\' | awk \'{print $2}\'
else
  echo "Unsupported Package Manager" >&2
  exit 2
fi`,
    code_skipped: 1,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdin_log: false,
    stdout_log: false,
    shy: true
  }, function(err, {status, stdout}) {
    var pkg;
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager");
    }
    if (err) {
      throw err;
    }
    if (!status) {
      return;
    }
    this.log({
      message: "Installed packages retrieved",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    return options.installed = (function() {
      var len3, m, ref3, results;
      ref3 = string.lines(stdout);
      results = [];
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        pkg = ref3[m];
        results.push(pkg);
      }
      return results;
    })();
  });
  // List packages waiting for update
  this.system.execute({
    unless: options.outpdated != null,
    if: function() {
      return options.installed.indexOf(options.name) === -1;
    },
    cmd: `if command -v yum >/dev/null 2>&1; then
  yum ${cacheonly} list updates | egrep updates$ | sed 's/\\([^\\.]*\\).*/\\1/'
elif command -v pacman >/dev/null 2>&1; then
  pacman -Qu | sed 's/\\([^ ]*\\).*/\\1/'
elif command -v apt-get >/dev/null 2>&1; then
  apt-get -u upgrade --assume-no | grep '^\\s' | sed 's/\\s/\\n/g'
else
  echo "Unsupported Package Manager" >&2
  exit 2
fi`,
    code_skipped: 1,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdin_log: false,
    stdout_log: false,
    shy: true
  }, function(err, {status, stdout}) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager");
    }
    if (err) {
      throw err;
    }
    if (!status) {
      return options.outpdated = [];
    }
    this.log({
      message: "Outpdated package list retrieved",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    return options.outpdated = string.lines(stdout.trim());
  });
  this.system.execute({
    if: function() {
      return options.installed.indexOf(options.name) === -1 || options.outpdated.indexOf(options.name) !== -1;
    },
    cmd: `if command -v yum >/dev/null 2>&1; then
  yum install -y ${cacheonly} ${options.name}
elif command -v yay >/dev/null 2>&1; then
  yay --noconfirm -S ${options.name} ${options.yay_flags.join(' ')}
elif command -v yaourt >/dev/null 2>&1; then
  yaourt --noconfirm -S ${options.name} ${options.yaourt_flags.join(' ')}
elif command -v pacman >/dev/null 2>&1; then
  pacman --noconfirm -S ${options.name} ${options.pacman_flags.join(' ')}
elif command -v apt-get >/dev/null 2>&1; then
  env DEBIAN_FRONTEND=noninteractive apt-get install -y ${options.name}
else
  echo "Unsupported Package Manager: yum, pacman, apt-get supported" >&2
  exit 2
fi`,
    code_skipped: options.code_skipped,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir
  }, function(err, {status}) {
    var installedIndex, outpdatedIndex;
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager: yum, yaourt, pacman, apt-get supported");
    }
    if (err) {
      throw err;
    }
    this.log(status ? {
      message: `Package \"${options.name}\" is installed`,
      level: 'WARN',
      module: 'nikita/lib/service/install'
    } : {
      message: `Package \"${options.name}\" is already installed`,
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    // Enrich installed array with package name unless already there
    installedIndex = options.installed.indexOf(options.name);
    if (installedIndex === -1) {
      options.installed.push(options.name);
    }
    // Remove package name from outpdated if listed
    if (options.outpdated) {
      outpdatedIndex = options.outpdated.indexOf(options.name);
      if (outpdatedIndex !== -1) {
        return options.outpdated.splice(outpdatedIndex, 1);
      }
    }
  });
  return this.call({
    if: options.cache
  }, function() {
    this.log({
      message: "Caching installed on \"nikita:execute:installed\"",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    this.store['nikita:execute:installed'] = options.installed;
    this.log({
      message: "Caching outpdated list on \"nikita:execute:outpdated\"",
      level: 'INFO',
      module: 'nikita/lib/service/install'
    });
    return this.store['nikita:execute:outpdated'] = options.outpdated;
  });
};

// ## Dependencies
string = require('@nikitajs/core/lib/misc/string');
