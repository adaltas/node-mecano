// Generated by CoffeeScript 2.5.1
// # `nikita.service.restart`

// Restart a service.

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `modified`   
//   Indicates if the startup behavior has changed.   

// ## Example

// ```js
// const {status} = await nikita.service.restart([{
//   ssh: ssh,
//   name: 'gmetad'
// })
// console.info(`Service was restarted: ${status}`)
// ```

// ## Hooks
var handler, on_action, schema;

on_action = function({config, metadata}) {
  if (typeof metadata.argument === 'string') {
    return config.name = metadata.argument;
  }
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'name': {
      $ref: 'module://@nikitajs/service/src/install#/properties/name'
    }
  },
  required: ['name']
};

// ## Handler
handler = async function({
    config,
    parent: {state},
    tools: {log}
  }) {
  var loader, status;
  // log message: "Entering service.restart", level: 'DEBUG', module: 'nikita/lib/service/restart'
  log({
    message: `Restart service ${config.name}`,
    level: 'INFO',
    module: 'nikita/lib/service/restart'
  });
  ({loader} = (await this.service.discover({})));
  if (config.loader == null) {
    config.loader = loader;
  }
  ({status} = (await this.execute({
    command: (function() {
      switch (config.loader) {
        case 'systemctl':
          return `systemctl restart ${config.name}`;
        case 'service':
          return `service ${config.name} restart`;
        default:
          throw Error('Init System not supported');
      }
    })()
  })));
  if (status) {
    state[`nikita.service.${config.name}.status`] = 'started';
  }
  return {
    status: status
  };
};

// ## Export
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  metadata: {
    schema: schema
  }
};
