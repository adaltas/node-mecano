// Generated by CoffeeScript 2.5.1
// # `nikita.lxd.goodies.prlimit`

// Print the process limit associated with a running container.

// ## Output

// * `error` (object)
//   The error object, if any.
// * `output.stdout` (string)
//   The standard output from the `prlimit` command.
// * `output.limits` (array)
//   The limit object parsed from `stdout`; each element of the array contains the
//   keys `resource`, `description`, `soft`, `hard` and `units`.

// ## Example

// ```js
// const {stdout, limits} = await nikita.lxd.goodies.prlimit({
//   container: "my_container"
// })
// console.info( `${stdout} ${JSON.decode(limits)}`)
// ```

// ## Schema
var handler, schema, utils;

schema = {
  type: 'object',
  properties: {
    'container': {
      $ref: 'module://@nikitajs/lxd/src/init#/properties/container'
    }
  },
  required: ['container']
};

// ## Handler
handler = async function({config}) {
  var description, err, hard, i, limits, line, resource, soft, stdout, units;
  try {
    // log message: "Entering lxd.goodies.prlimit", level: 'DEBUG', module: '@nikitajs/lxd/lib/goodies/prlimit'
    ({stdout} = (await this.execute({
      command: `command -p prlimit || exit 3
sudo prlimit -p $(lxc info ${config.container} | awk '$1==\"Pid:\"{print $2}')`
    })));
    limits = (function() {
      var j, len, ref, results;
      ref = utils.string.lines(stdout);
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        line = ref[i];
        if (i === 0) {
          continue;
        }
        [resource, description, soft, hard, units] = line.split(/\s+/);
        results.push({
          resource: resource,
          description: description,
          soft: soft,
          hard: hard,
          units: units
        });
      }
      return results;
    })();
    return {
      stdout: stdout,
      limits: limits
    };
  } catch (error) {
    err = error;
    if (err.exit_code === 3) {
      throw Error('Invalid Requirement: this action requires prlimit installed on the host');
    }
  }
};

// ## Export
module.exports = {
  handler: handler,
  schema: schema,
  metadata: {
    shy: true
  }
};

// ## Dependencies
utils = require('../utils');
