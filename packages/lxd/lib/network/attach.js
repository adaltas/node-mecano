// Generated by CoffeeScript 2.5.1
// # `nikita.lxd.network.attach`

// Attach an existing network to a container.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if the network was attached.

// ## Example

// ```js
// require('nikita')
// .lxd.network.attach({
//   network: 'network0',
//   container: 'container1'
// }, function(err, {status}){
//   console.info( err ? err.message : 'Network attached: ' + status);
// })
// ```

// ## Schema
var handler, schema;

schema = {
  type: 'object',
  properties: {
    'network': {
      type: 'string',
      description: `The network name to attach.`
    },
    'container': {
      $ref: 'module://@nikitajs/lxd/src/init#/properties/container'
    }
  },
  required: ['network', 'container']
};

// ## Handler
handler = function({config}) {
  var cmd_attach;
  // log message: "Entering lxd.network.attach", level: "DEBUG", module: "@nikitajs/lxd/lib/network/attach"
  //Build command
  cmd_attach = ['lxc', 'network', 'attach', config.network, config.container].join(' ');
  //Execute
  return this.execute({
    cmd: `lxc config device list ${config.container} | grep ${config.network} && exit 42
${cmd_attach}`,
    code_skipped: 42
  });
};

// ## Export
module.exports = {
  handler: handler,
  schema: schema
};
