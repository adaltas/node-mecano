// Generated by CoffeeScript 2.5.1
// # `nikita.lxd.config.device`

// Create a device or update its configuration.

// ## Callback parameters

// * `err`
//   Error object if any.
// * `result.status`
//   True if the device was created or the configuraion updated.

// ## Example

// ```js
// const {status} = await nikita.lxd.config.device({
//   container: 'container1',
//   device: 'root',
//   type: 'disk',
//   properties: {
//     'pool': 'system',
//     'size': '10GB'
//   }
// })
// console.info(`Disk was created: ${status}`)
// ```

// ## Schema
var diff, handler, schema, utils;

schema = {
  type: 'object',
  properties: {
    'container': {
      $ref: 'module://@nikitajs/lxd/src/init#/properties/container'
    },
    'device': {
      type: 'string',
      description: `Name of the device in LXD configuration, for example "eth0".`
    },
    'properties': {
      type: 'object',
      patternProperties: {
        '': {
          type: ['string', 'boolean', 'number']
        }
      },
      description: `One or multiple keys to set depending on the type.`
    },
    'type': {
      type: 'string',
      description: `Type of device, see [the list of device
types](https://lxd.readthedocs.io/en/latest/instances/#device-types).`
    }
  },
  oneOf: [
    {
      $ref: '#/definitions/disk'
    },
    {
      $ref: '#/definitions/infiniband'
    },
    {
      $ref: '#/definitions/gpu'
    },
    {
      $ref: '#/definitions/nic'
    },
    {
      $ref: '#/definitions/none'
    },
    {
      $ref: '#/definitions/proxy'
    },
    {
      $ref: '#/definitions/tpm'
    },
    {
      $ref: '#/definitions/unix-block'
    },
    {
      $ref: '#/definitions/unix-char'
    },
    {
      $ref: '#/definitions/unix-hotplug'
    },
    {
      $ref: '#/definitions/usb'
    }
  ],
  required: ['container', 'device', 'properties', 'type'],
  definitions: {
    'disk': {
      properties: {
        'properties': {
          type: 'object',
          properties: {
            'path': {
              type: 'string',
              description: `Path inside the instance where the disk will be mounted (only
for containers).`
            },
            'source': {
              type: 'string',
              description: `Path on the host, either to a file/directory or to a block
device.`
            }
          },
          required: ['path', 'source']
        },
        'type': {
          const: 'disk'
        }
      }
    },
    'infiniband': {
      properties: {
        'properties': {
          properties: {
            'nictype': {
              type: 'string',
              enum: ['physical', 'sriov'],
              description: `The device type, one of "physical", or "sriov".`
            },
            'parent': {
              type: 'string',
              description: `The name of the host device or bridge.`
            }
          },
          required: ['nictype', 'parent']
        },
        'type': {
          const: 'infiniband'
        }
      }
    },
    'gpu': {
      properties: {
        'type': {
          const: 'gpu'
        }
      }
    },
    'nic': {
      properties: {
        'properties': {
          type: 'object',
          properties: {
            'nictype': {
              type: 'string',
              enum: ['physical', 'bridged', 'macvlan', 'p2p', 'sriov'],
              description: `LXD supports different kind of [network
devices](https://lxd.readthedocs.io/en/stable-3.0/containers/#type-nic)
and each type of network interface types have different
additional properties.`
            }
          },
          oneOf: [
            {
              $ref: '#/definitions/nic_physical'
            },
            {
              $ref: '#/definitions/nic_bridged'
            },
            {
              $ref: '#/definitions/nic_macvlan'
            },
            {
              $ref: '#/definitions/nic_p2p'
            },
            {
              $ref: '#/definitions/nic_sriov'
            }
          ]
        },
        'type': {
          const: 'nic'
        }
      }
    },
    'nic_physical': {
      properties: {
        'nictype': {
          const: 'physical'
        }
      }
    },
    'nic_bridged': {
      properties: {
        'nictype': {
          const: 'bridged'
        }
      }
    },
    'nic_macvlan': {
      properties: {
        'nictype': {
          const: 'macvlan'
        }
      }
    },
    'nic_p2p': {
      properties: {
        'nictype': {
          const: 'p2p'
        }
      }
    },
    'nic_sriov': {
      properties: {
        'nictype': {
          const: 'sriov'
        }
      }
    },
    'none': {
      properties: {
        'type': {
          const: 'none'
        }
      }
    },
    'proxy': {
      properties: {
        'properties': {
          properties: {
            'connect': {
              type: 'string',
              description: `The address and port to bind and listen
(<type>:<addr>:<port>[-<port>][,<port>])`
            },
            'parent': {
              type: 'string',
              description: `The address and port to connect to
(<type>:<addr>:<port>[-<port>][,<port>])`
            }
          },
          required: ['connect', 'listen']
        },
        'type': {
          const: 'proxy'
        }
      }
    },
    'tpm': {
      properties: {
        'type': {
          const: 'tpm'
        }
      }
    },
    'unix-block': {
      properties: {
        'type': {
          const: 'unix-block'
        }
      }
    },
    'unix-char': {
      properties: {
        'type': {
          const: 'unix-char'
        }
      }
    },
    'unix-hotplug': {
      properties: {
        'properties': {
          properties: {
            'path': {
              type: 'string',
              description: `Path inside the instance (only for containers).`
            }
          },
          required: ['path']
        },
        'type': {
          const: 'unix-hotplug'
        }
      }
    },
    'usb': {
      properties: {
        'type': {
          const: 'usb'
        }
      }
    }
  }
};

// ## Handler
handler = async function({config}) {
  var changes, err, k, key, properties, ref, status, v, value;
  ref = config.properties;
  // log message: "Entering lxd config.device", level: "DEBUG", module: "@nikitajs/lxd/lib/config/device"
  // Normalize config
  for (k in ref) {
    v = ref[k];
    if (typeof v === 'string') {
      continue;
    }
    config.properties[k] = v.toString();
  }
  ({properties} = (await this.lxd.config.device.show({
    container: config.container,
    device: config.device
  })));
  try {
    if (!properties) {
      // Device not registed, we need to use `add`
      ({status} = (await this.execute({
        command: [
          'lxc',
          'config',
          'device',
          'add',
          config.container,
          config.device,
          config.type,
          ...((function() {
            var ref1,
          results;
            ref1 = config.properties;
            results = [];
            for (key in ref1) {
              value = ref1[key];
              results.push(`${key}='${value.replace('\'',
          '\\\'')}'`);
            }
            return results;
          })())
        ].join(' ')
      })));
    } else {
      // Device not registed, we need to use `set`
      changes = diff(properties, config.properties);
      for (key in changes) {
        value = changes[key];
        ({status} = (await this.execute({
          command: ['lxc', 'config', 'device', 'set', config.container, config.device, key, `'${value.replace('\'', '\\\'')}'`].join(' ')
        })));
      }
    }
    return {
      status: status
    };
  } catch (error) {
    err = error;
    utils.stderr_to_error_message(err, err.stderr);
    throw err;
  }
};

// ## Export
module.exports = {
  handler: handler,
  metadata: {
    schema: schema
  }
};

// ## Dependencies
diff = require('object-diff');

utils = require('../../utils');
