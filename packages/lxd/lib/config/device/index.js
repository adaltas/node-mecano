// Generated by CoffeeScript 2.3.2
  // # `nikita.lxd.config.device`

  // Create or update a device's configuration

  // ## Options

  // * `name` (string, required)
  //   The name of the container.
  // * `device` (string, required)
  //   Name of the device in LXD configuration, for example "eth0".
  // * `config` (object, required)
  //   One or multiple keys to set.
  // * `type` (string, required)
  //   Type of device, see [list of devices type](https://github.com/lxc/lxd/blob/master/doc/containers.md#device-types).

  // ## Callback parameters

  // * `err`
  //   Error object if any
  // * `status`
  //   True if the device was created or the configuraion updated.

  // ## Example

  // ```js
  // require('nikita')
  // .lxd.config.device({
  //   name: 'container1',
  //   device: 'root',
  //   type: 'disk'
  //   config: {
  //     'pool': 'system',
  //     'size': '10GB'
  //   }
  // }, function(err, {status}){
  //   console.log( err ? err.message : 'Network created: ' + status);
  // })
  // ```

  // ## Source Code
var diff, yaml,
  indexOf = [].indexOf;

module.exports = {
  handler: function({options}, callback) {
    var valid_devices;
    this.log({
      message: "Entering lxd config.device",
      level: "DEBUG",
      module: "@nikitajs/lxd/lib/config/device"
    });
    //Check args
    valid_devices = ['none', 'nic', 'disk', 'unix-char', 'unix-block', 'usb', 'gpu', 'infiniband', 'proxy'];
    if (!options.name) {
      throw Error("Invalid Option: Container name is required");
    }
    if (!options.device) {
      throw Error("Invalid Option: Device name is required");
    }
    return this.lxd.config.device.exists({
      name: options.name,
      device: options.device
    }, function(err, {status, config}) {
      var changes, k, key, ref, ref1, v, value;
      if (!status) {
        if (ref = options.type, indexOf.call(valid_devices, ref) < 0) {
          throw Error(`Invalid Option: Unrecognized device type, valid devices are: ${valid_devices.join(', ')}`);
        }
        ref1 = options.config;
        for (k in ref1) {
          v = ref1[k];
          if (typeof v === 'string') {
            continue;
          }
          options.config[k] = typeof v === 'boolean' ? v ? 'true' : 'false' : void 0;
        }
        return this.system.execute({
          cmd: `${[
            'lxc',
            'config',
            'device',
            'add',
            options.name,
            options.device,
            options.type,
            ...((function() {
              var ref2,
            results;
              ref2 = options.config;
              results = [];
              for (key in ref2) {
                value = ref2[key];
                results.push(`${key}='${value.replace('\'',
            '\\\'')}'`);
              }
              return results;
            })())
          ].join(' ')}`
        }, function(err, {status}) {
          if (err) {
            return callback(err, {
              status: false
            });
          }
          return callback(void 0, {
            status: true
          });
        });
      } else {
        changes = diff(config[options.device], options.config);
        if (!Object.keys(changes).length) {
          return callback(void 0, {
            status: false
          });
        }
        for (key in changes) {
          value = changes[key];
          this.system.execute({
            cmd: ['lxc', 'config', 'device', 'set', options.name, options.device, key, `'${value.replace('\'', '\\\'')}'`].join(' ')
          });
        }
        return callback(void 0, {
          status: true
        });
      }
    });
  }
};

// ## Dependencies
yaml = require('js-yaml');

diff = require('object-diff');
