// Generated by CoffeeScript 2.4.1
// # `nikita.lxd.storage`

// Creates or updates a storage configuration.

// ## Options

// * `name` (required, string)
//   The storage name
// * `driver` (required, string)
//   The underlying driver name. Can be btrfs, ceph, dir, lvm, zfs
// * `config` (optional, object, {})
//   The configuration to use to configure this storage, depends on the driver

// ## Callback Parameters

// * `err`
//   Error object if any
// * `status`
//   Was the storage created

// ## Example

// ```
// require('nikita')
// .lxd.storage({
//   name: "system",
//   driver: "zfs",
//   config: {
//     source: "syspool/lxd"
//   }
// }, function(err, {status}) {
//   console.log( err ? err.message : 'The storage was created or config updated')
// });
// ```

// ## Source Code
var diff, yaml;

module.exports = function({options}) {
  var key, ref, value;
  this.log({
    message: "Entering lxd.storage",
    level: 'DEBUG',
    module: '@nikitajs/lxd/lib/storage'
  });
  if (!options.name) {
    throw Error("Invalid Option: name is required");
  }
  if (!options.driver) {
    throw Error("Invalid Option: driver is required");
  }
  if ((ref = options.driver) !== "btrfs" && ref !== "ceph" && ref !== "dir" && ref !== "lvm" && ref !== "zfs") {
    throw Error(`Invalid driver: ${options.driver}`);
  }
  return this.system.execute({
    cmd: `lxc storage show ${options.name} && exit 42\n${[
      'lxc',
      'storage',
      'create',
      options.name,
      options.driver,
      (function() {
        var ref1,
      results;
        ref1 = options.config;
        results = [];
        for (key in ref1) {
          value = ref1[key];
          results.push(`${key}='${value.replace('\'',
      '\\\'')}'`);
        }
        return results;
      })()
    ].join(' ')}`,
    code_skipped: 42
  }, function(err, {stdout, code}) {
    var changes, config, results;
    // Storage created
    if (code !== 42) {
      return;
    }
    // Storage already exists, find the changes
    ({config} = yaml.safeLoad(stdout));
    changes = diff(config, options.config);
    results = [];
    for (key in changes) {
      value = changes[key];
      // if config is empty status is false because no command were executed
      results.push(this.system.execute({
        cmd: ['lxc', 'storage', 'set', options.name, key, `'${value.replace('\'', '\\\'')}'`].join(' ')
      }));
    }
    return results;
  });
};

// ## Dependencies
yaml = require('js-yaml');

diff = require('object-diff');
