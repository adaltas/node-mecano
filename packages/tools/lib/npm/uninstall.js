// Generated by CoffeeScript 2.5.1
  // # `nikita.tools.npm.uninstall`

// Remove one or more NodeJS packages.

// ## Example

// The following action uninstalls the coffescript package globally.

// ```javascript
  // require('nikita')
  // .tools.npm({
  //   name: 'coffeescript',
  //   global: true
  // }, (err, {status}) => {
  //   console.info(err ? err.message : 'Package uninstalled ' + status);
  // });
  // ```

// ## Hooks
var handler, on_action, schema,
  indexOf = [].indexOf;

on_action = function({config}) {
  if (config.argument != null) {
    throw Error('Deprecated config `argument`');
  }
  if (typeof config.name === 'string') {
    return config.name = [config.name];
  }
};


// ## Schema
schema = {
  type: 'object',
  properties: {
    'name': {
      oneOf: [
        {
          type: 'string'
        },
        {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      ],
      description: 'Name of the package(s) to remove.'
    },
    'global': {
      type: 'boolean',
      default: false,
      description: 'Uninstalls the current package context as a global package.'
    }
  },
  required: ['name']
};

// ## Handler
handler = async function({config, log}) {
  var global, installed, pkgs, stdout, uninstall;
  global = config.global ? '-g' : '';
  // Get installed packages
  installed = [];
  ({stdout} = (await this.execute({
    cmd: `npm list --json ${global}`,
    code: [0, 1],
    stdout_log: false,
    shy: true,
    sudo: config.sudo
  })));
  pkgs = JSON.parse(stdout);
  if (Object.keys(pkgs).length) {
    installed = Object.keys(pkgs.dependencies);
  }
  // Uninstall
  uninstall = config.name.filter(function(pkg) {
    return indexOf.call(installed, pkg) >= 0;
  });
  if (uninstall.length) {
    await this.execute({
      cmd: `npm uninstall ${global} ${uninstall.join(' ')}`,
      sudo: config.sudo
    });
    return log({
      message: `NPM uninstalled packages: ${uninstall.join(', ')}`
    });
  }
};

// ## Export
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  schema: schema
};
