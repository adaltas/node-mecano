// Generated by CoffeeScript 2.5.1
  // # `nikita.tools.npm.uninstall`

// Remove one or more NodeJS packages.

// ## Example

// The following action uninstalls the coffescript package globally.

// ```js
  // const {status} = await nikita.tools.npm.uninstall({
  //   name: 'coffeescript',
  //   global: true
  // })
  // console.info(`Package was uninstalled: ${status}`)
  // ```

// ## Hooks
var handler, on_action, schema,
  indexOf = [].indexOf;

on_action = function({config, metadata}) {
  if (typeof metadata.argument === 'string') {
    config.name = metadata.argument;
  }
  if (typeof config.name === 'string') {
    return config.name = [config.name];
  }
};


// ## Schema
schema = {
  type: 'object',
  properties: {
    'cwd': {
      $ref: 'module://@nikitajs/engine/src/actions/execute#/properties/cwd'
    },
    'name': {
      type: 'array',
      items: {
        type: 'string'
      },
      description: `Name of the package(s) to remove.`
    },
    'global': {
      type: 'boolean',
      default: false,
      description: `Uninstalls the current package context as a global package.`
    }
  },
  required: ['name'],
  if: {
    properties: {
      'global': {
        const: false
      }
    }
  },
  then: {
    required: ['cwd']
  }
};

// ## Handler
handler = async function({
    config,
    tools: {log}
  }) {
  var global, installed, pkgs, stdout, uninstall;
  global = config.global ? '-g' : '';
  // Get installed packages
  installed = [];
  ({stdout} = (await this.execute({
    command: `npm list --json ${global}`,
    code: [0, 1],
    cwd: config.cwd,
    stdout_log: false,
    metadata: {
      shy: true
    }
  })));
  pkgs = JSON.parse(stdout);
  if (Object.keys(pkgs).length) {
    installed = Object.keys(pkgs.dependencies);
  }
  // Uninstall
  uninstall = config.name.filter(function(pkg) {
    return indexOf.call(installed, pkg) >= 0;
  });
  if (!uninstall.length) {
    return;
  }
  await this.execute({
    command: `npm uninstall ${global} ${uninstall.join(' ')}`,
    cwd: config.cwd,
    sudo: config.sudo
  });
  return log({
    message: `NPM uninstalled packages: ${uninstall.join(', ')}`
  });
};

// ## Export
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  schema: schema
};
