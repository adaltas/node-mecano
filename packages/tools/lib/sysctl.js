// Generated by CoffeeScript 2.5.1
  // # `nikita.tools.sysctl`

// Configure kernel parameters at runtime.

// Target file will be overwritten by default, use the `merge` option to preserve existing variables.

// Comments will be preserved if the `comments` and `merge` config are enabled.

// ## Options

// * `backup` (string|boolean)   
  //   Create a backup, append a provided string to the filename extension or a
  //   timestamp if value is not a string, only apply if the target file exists and
  //   is modified.
  // * `comment` (boolean)   
  //   Preserve comments.
  // * `load` (boolean)   
  //   Load properties if target is modified, default is "true".
  // * `merge` (boolean)    
  //   Preserve existing variables in the target file.
  // * `properties` (object)   
  //   Key/value object representing sysctl properties and values.
  // * `target` (string)
  //   Destination to write properties and load in sysctl settings, default to "/etc/sysctl.conf" if none given.

// ## Callback parameters

// * `err` (Error)   
  //   Error object if any.   
  // * `status`  (boolean)   
  //   Value is "true" if the property was created or updated.

// ## Usefull Commands

// * Display all sysctl variables   
  //   `sysctl -a`
  // * Display value for a kernel variable   
  //   `sysctl -n kernel.hostname`
  // * Set a kernel variable
  //   `echo "value" > /proc/sys/location/variable`
  //   `echo 'variable = value' >> /etc/sysctl.conf && sysctl -p`
  //   `echo '0' > /proc/sys/fs/protected_regular && sysctl -p && sysctl -a | grep 'fs.protected_regular = 0'`

// ## Example

// ```js
  // require('nikita').tools.sysctl({
  //   source: '/etc/sysctl.conf',
  //   properties: {
  //     'vm.swappiness': 1
  //   }
  // }, function(err, {status}){
  //   console.info(err ? err.message : 'Systcl reloaded: ' + status);
  // });
  // ```

// ## Schema
var handler, schema, string,
  indexOf = [].indexOf;

schema = {
  type: 'object',
  properties: {
    '': {
      type: 'object',
      description: `          `
    }
  }
};

// ## Handler
handler = function({config}) {
  var current, final;
  this.log({
    message: "Entering sysctl",
    level: 'DEBUG',
    module: 'nikita/lib/tools/sysctl'
  });
  // Options
  if (config.load == null) {
    config.load = true;
  }
  if (config.target == null) {
    config.target = '/etc/sysctl.conf';
  }
  // Read current properties
  current = {};
  this.call(function(_, callback) {
    var status;
    status = false;
    this.log({
      message: `Read target: ${config.target}`,
      level: 'DEBUG',
      module: 'nikita/lib/tools/sysctl'
    });
    return this.fs.readFile({
      ssh: config.ssh,
      target: config.target,
      encoding: 'ascii'
    }, (err, {data}) => {
      var i, key, len, line, ref, value;
      if (err && err.code === 'ENOENT') {
        return callback();
      }
      if (err) {
        return callback(err);
      }
      ref = string.lines(data);
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        // Preserve comments
        if (/^#/.test(line)) {
          if (config.comment) {
            current[line] = null;
          }
          continue;
        }
        if (/^\s*$/.test(line)) {
          current[line] = null;
          continue;
        }
        [key, value] = line.split('=');
        // Trim
        key = key.trim();
        value = value.trim();
        // Skip property
        if (indexOf.call(config.properties, key) >= 0 && (config.properties[key] == null)) {
          this.log(`Removing Property: ${key}, was ${value}`, {
            level: 'INFO',
            module: 'nikita/lib/tools/sysctl'
          });
          status = true;
          continue;
        }
        // Set property
        current[key] = value;
      }
      return callback(null, status);
    });
  });
  // Merge user properties
  final = {};
  this.call(function(_, callback) {
    var k, key, ref, status, v, value;
    if (config.merge) {
      for (k in current) {
        v = current[k];
        final[k] = v;
      }
    }
    status = false;
    ref = config.properties;
    for (key in ref) {
      value = ref[key];
      if (value == null) {
        continue;
      }
      if (typeof value === 'number') {
        value = `${value}`;
      }
      if (current[key] === value) {
        continue;
      }
      this.log(`Update Property: key \"${key}\" from \"${final[key]}\" to \"${value}\"`, {
        level: 'INFO',
        module: 'nikita/lib/tools/sysctl'
      });
      final[key] = value;
      status = true;
    }
    return callback(null, status);
  });
  this.call({
    if: function() {
      return this.status();
    }
  }, function() {
    var key, value;
    return this.file({
      target: config.target,
      backup: config.backup,
      content: ((function() {
        var results;
        results = [];
        for (key in final) {
          value = final[key];
          if (value != null) {
            results.push(`${key} = ${value}`);
          } else {
            results.push(`${key}`);
          }
        }
        return results;
      })()).join('\n')
    });
  });
  return this.execute({
    if: [
      config.load,
      function() {
        return this.status();
      }
    ],
    cmd: `sysctl -p ${config.target}`
  });
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
string = require('@nikitajs/core/lib/misc/string');
