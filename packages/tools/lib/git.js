// Generated by CoffeeScript 2.5.1
// # `nikita.tools.git`

// Create and synchronize a git repository.

// ## Callback Parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Value "true" if repository was created or modified.   

// ## Example

// The following action make sure the git repository is synchronized to the latest
// HEAD revision.

// ```js
// const {status} = await nikita.tools.git({
//   source: 'https://github.com/wdavidw/node-nikita.git'
//   target: '/tmp/nikita'
// })
// console.info(`Repo was synchronized: ${status}`)
// ```

// ## Schema
var handler, schema;

schema = {
  type: 'object',
  properties: {
    'revision': {
      type: 'string',
      default: 'HEAD',
      description: `Git revision, branch or tag.`
    },
    'source': {
      type: 'string',
      description: `Git source repository address.`
    },
    'target': {
      type: 'string',
      description: `Directory where to clone the repository.`
    }
  },
  required: ['source', 'target']
};

// ## Handler
handler = async function({
    config,
    ssh,
    tools: {path}
  }) {
  var gitDir, is_git, repo_exists, repo_uptodate;
  // Start real work
  repo_uptodate = false;
  ({
    exists: repo_exists
  } = (await this.fs.base.exists({
    target: config.target
  })));
  if (repo_exists) {
    // return callback Error "Destination not a directory, got #{config.target}" unless stat.isDirectory()
    gitDir = `${config.target}/.git`;
    ({
      exists: is_git
    } = (await this.fs.base.exists({
      target: gitDir
    })));
    if (!is_git) {
      throw Error("Not a git repository");
    }
  } else {
    this.execute({
      command: `git clone ${config.source} ${config.target}`,
      cwd: path.dirname(config.target)
    });
  }
  if (repo_exists) {
    ({
      status: repo_uptodate
    } = (await this.execute({
      command: `current=\`git log --pretty=format:'%H' -n 1\`
target=\`git rev-list --max-count=1 ${config.revision}\`
echo "current revision: $current"
echo "expected revision: $target"
if [ $current != $target ]; then exit 3; fi`,
      // stdout: process.stdout
      cwd: config.target,
      trap: true,
      code_skipped: 3,
      metadata: {
        shy: true
      }
    })));
  }
  if (!repo_uptodate) {
    return this.execute({
      command: `git checkout ${config.revision}`,
      cwd: config.target
    });
  }
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    schema: schema
  }
};
