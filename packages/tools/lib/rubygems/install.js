// Generated by CoffeeScript 2.5.1
  // # `nikita.tools.gem.install`

// Install a Ruby gem.

// Ruby gems package a ruby library with a common layout. Inside gems are the 
  // following components:

// - Code (including tests and supporting utilities)
  // - Documentation
  // - gemspec

// ## Callback parameters

// * `err`   
  //   Error object if any.
  // * `status`   
  //   Indicate if a gem was installed.

// ## Examples

// Install a gem from its name and version:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   name: 'json',
  //   version: '2.1.0',
  // }, function(err, {status}){
  //   console.info( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// Install a gem from a local file:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   source: '/path/to/json-2.1.0.gem',
  // }, function(err, {status}){
  //   console.info( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// Install gems from a glob expressoin:

// ```js
  // require('nikita')
  // .tools.rubygems.install({
  //   source: '/path/to/*.gem',
  // }, function(err, {status}){
  //   console.info( err ? err.messgage : 'Gem installed: ' + status);
  // });
  // ```

// ## Schema
var handler, path, schema, semver, utils,
  indexOf = [].indexOf;

schema = {
  type: 'object',
  properties: {
    'bindir': {
      type: 'string',
      description: `Directory where binary files are located.`
    },
    'build_flags': {
      type: 'string',
      description: `Pass flags to the compiler.`
    },
    'gem_bin': {
      type: 'string',
      default: 'gem',
      description: `Path to the gem command.`
    },
    'name': {
      type: 'string',
      description: `Name of the gem.`
    },
    'target': {
      type: 'string',
      description: `Install directory.`
    },
    'version': {
      type: 'string',
      description: `Version of the gem.`
    }
  },
  required: ['name']
};

// ## Handler
handler = async function({config, ssh}) {
  var base, current_gems, i, k, len, line, name, name1, ref, ref1, stdout, v, version;
  // log message: "Entering rubygem.install", level: 'DEBUG', module: 'nikita/lib/tools/rubygem/install'
  // Global config
  if (config.ruby == null) {
    config.ruby = {};
  }
  ref = config.ruby;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (config.gem_bin == null) {
    config.gem_bin = 'gem';
  }
  if (config.gems == null) {
    config.gems = {};
  }
  if (config.name) {
    if ((base = config.gems)[name1 = config.name] == null) {
      base[name1] = config.version;
    }
  }
  if (config.sources == null) {
    config.sources = [];
  }
  current_gems = {};
  ({stdout} = (await this.execute({
    cmd: `${config.gem_bin} list --versions`,
    shy: true,
    bash: config.bash
  })));
  ref1 = utils.string.lines(stdout);
  for (i = 0, len = ref1.length; i < len; i++) {
    line = ref1[i];
    if (line.trim() === '') {
      continue;
    }
    [name, version] = line.match(/(.*?)(?:$| \((?:default:\s+)?([\d\., ]+)\))/).slice(1, 4);
    current_gems[name] = version.split(', ');
  }
  this.call({
    if: config.source
  }, function(_, callback) {
    return this.file.glob(config.source, function(err, {files}) {
      if (err) {
        return callback(err);
      }
      config.source = files.filter(function(source) {
        var current_filenames, filename, n;
        filename = path.basename(source);
        current_filenames = (function() {
          var results;
          results = [];
          for (n in current_gems) {
            v = current_gems[n];
            results.push(`${n}-${v}.gem`);
          }
          return results;
        })();
        if (indexOf.call(current_filenames, filename) < 0) {
          return true;
        }
      });
      return callback();
    });
  });
  this.call(function() {
    var is_version_matching, ref2, results;
    ref2 = config.gems;
    results = [];
    for (name in ref2) {
      version = ref2[name];
      if (!current_gems[name]) {
        // Install if Gem isnt yet there
        continue;
      }
      // Install if a version is demanded and no installed versio satisfy it
      is_version_matching = current_gems[name].some(function(current_version) {
        return semver.satisfies(version, current_version);
      });
      if (version && !is_version_matching) {
        continue;
      }
      results.push(delete config.gems[name]);
    }
    return results;
  });
  this.call(function() {
    return {
      if: config.sources.length
    };
  }, function() {
    var source;
    return this.execute({
      if: config.sources.length,
      cmd: ((function() {
        var j, len1, ref2, results;
        ref2 = config.sources;
        results = [];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          source = ref2[j];
          results.push([`${config.gem_bin}`, "install", config.bindir ? `--bindir '${config.bindir}'` : void 0, config.target ? `--install-dir '${config.target}'` : void 0, config.source ? `--local '${config.source}'` : void 0, config.build_flags ? "--build-flags config.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: config.bash
    });
  });
  return this.call(function() {
    return this.execute({
      if: Object.keys(config.gems).length,
      cmd: ((function() {
        var ref2, results;
        ref2 = config.gems;
        results = [];
        for (name in ref2) {
          version = ref2[name];
          results.push([`${config.gem_bin}`, "install", `${config.name}`, config.bindir ? `--bindir '${config.bindir}'` : void 0, config.target ? `--install-dir '${config.target}'` : void 0, config.version ? `--version '${config.version}'` : void 0, config.build_flags ? "--build-flags config.build_flags" : void 0].join(' '));
        }
        return results;
      })()).join('\n'),
      code: [0, 2],
      bash: config.bash
    });
  });
};

// ## Export
module.exports = {
  handler: handler,
  metadata: {
    global: 'ruby'
  },
  schema: schema
};

// ## Dependencies
path = require('path');

semver = require('semver');

utils = require('@nikitajs/engine/src/utils');
