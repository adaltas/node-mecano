// Generated by CoffeeScript 2.5.1
// # `nikita.db.schema`

// Create or modify a schema for the destination database.

// A PostgreSQL database contains one or multiple schemas which in turns contains
// table, data types, functions, and operators.

// Note, PostgreSQL default to the default `root` database while Nikita enforce the
// presence of the targeted database.

// ## Create Schema example

// ```js
// const {status} = await nikita.db.schema({
//   admin_username: 'test',
//   admin_password: 'test',
//   database: 'my_database'
//   schema: 'my_schema'
// })
// console.info(`Schema created or modified: ${status}`)
// ```

// ## Schema
var command, handler, schema;

schema = {
  type: 'object',
  properties: {
    'admin_username': {
      $ref: 'module://@nikitajs/db/src/query#/properties/admin_username'
    },
    'admin_password': {
      $ref: 'module://@nikitajs/db/src/query#/properties/admin_password'
    },
    'database': {
      type: 'string',
      description: `The database name where the schema is created.`
    },
    'engine': {
      $ref: 'module://@nikitajs/db/src/query#/properties/engine'
    },
    'host': {
      $ref: 'module://@nikitajs/db/src/query#/properties/host'
    },
    'port': {
      $ref: 'module://@nikitajs/db/src/query#/properties/port'
    },
    'owner': {
      type: 'string',
      description: `The Schema owner. Alter Schema if schema already exists.`
    },
    'schema': {
      type: 'string',
      description: `New schema name.`
    }
  },
  required: ['admin_username', 'admin_password', 'database', 'engine', 'host', 'schema']
};

// ## Handler
handler = async function({config}) {
  var status, stderr;
  ({status} = (await this.execute({
    code_skipped: 2,
    command: command(config, '\\dt'),
    shy: true
  })));
  if (!status) {
    throw Error(`Database does not exist ${config.database}`);
  }
  this.db.query({
    config: config
  }, {
    command: `CREATE SCHEMA ${config.schema};`,
    unless_execute: command(config, `SELECT 1 FROM pg_namespace WHERE nspname = '${config.schema}';`) + " | grep 1"
  });
  // Check if owner is the good one
  ({stderr} = (await this.execute({
    if: config.owner != null,
    unless_execute: command(config, '\\dn') + ` | grep '${config.schema}|${config.owner}'`,
    command: command(config, `ALTER SCHEMA ${config.schema} OWNER TO ${config.owner};`),
    code_skipped: 1
  })));
  if (/^ERROR:\s\srole.*does\snot\sexist/.test(stderr)) {
    throw Error(`Owner ${config.owner} does not exists`);
  }
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'db'
  },
  schema: schema
};


  // ## Dependencies
({command} = require('../query'));
