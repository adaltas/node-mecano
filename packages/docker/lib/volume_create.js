// Generated by CoffeeScript 2.5.1
// # `nikita.volume_create`

// Create a volume. 

// ## Options

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   True is volume was created.

// ## Example

// ```javascript
// require('nikita')
// .docker.pause({
//   name: 'my_volume'
// }, function(err, status){
//   console.log( err ? err.message : 'Volume created: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema;

schema = {
  type: 'object',
  properties: {
    'driver': {
      type: 'string',
      description: `Specify volume driver name.`
    },
    'label': {
      oneOf: [
        {
          type: 'string'
        },
        {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      ],
      description: `Set metadata for a volume.`
    },
    'name': {
      type: 'string',
      description: `Specify volume name.`
    },
    'opt': {
      oneOf: [
        {
          type: 'string'
        },
        {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      ],
      description: `Set driver specific options.`
    },
    'boot2docker': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/boot2docker'
    },
    'compose': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/compose'
    },
    'machine': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/machine'
    }
  }
};

// ## Handler
handler = async function({
    config,
    log,
    tools: {find}
  }) {
  var status;
  log({
    message: "Entering Docker volume_create",
    level: 'DEBUG',
    module: 'nikita/lib/docker/volume_create'
  });
  if (typeof config.label === 'string') {
    // Normalize config
    config.label = [config.label];
  }
  if (typeof config.opt === 'string') {
    config.opt = [config.opt];
  }
  ({status} = (await this.docker.tools.execute({
    if: config.name,
    cmd: `volume inspect ${config.name}`,
    code: 1,
    code_skipped: 0,
    shy: true
  })));
  return this.docker.tools.execute({
    if: function() {
      return !config.name || status;
    },
    cmd: ["volume create", config.driver ? `--driver ${config.driver}` : void 0, config.label ? `--label ${config.label.join(',')}` : void 0, config.name ? `--name ${config.name}` : void 0, config.opt ? `--opt ${config.opt.join(',')}` : void 0].join(' ')
  });
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'docker'
  },
  schema: schema
};

// ## Dependencies
docker = require('./utils');
