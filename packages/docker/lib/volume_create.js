// Generated by CoffeeScript 2.5.1
// # `nikita.volume_create`

// Create a volume. 

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.
// * `driver` (string)   
//   Specify volume driver name.
// * `label` (string|array)   
//   Set metadata for a volume.
// * `machine` (string)   
//   Name of the docker-machine, required if using docker-machine.
// * `name` (string)   
//   Specify volume name.
// * `opt` (string|array)   
//   Set driver specific options.

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   True is volume was created.

// ## Example

// ```javascript
// require('nikita')
// .docker.pause({
//   name: 'my_volume'
// }, function(err, status){
//   console.log( err ? err.message : 'Volume created: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema;

schema = {
  type: 'object',
  properties: {}
};

// ## Handler
handler = function({
    config,
    log,
    operations: {find}
  }) {
  var cmd, k, ref, v;
  log({
    message: "Entering Docker volume_create",
    level: 'DEBUG',
    module: 'nikita/lib/docker/volume_create'
  });
  // Global config
  if (config.docker == null) {
    config.docker = {};
  }
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (typeof config.label === 'string') {
    // Normalize config
    config.label = [config.label];
  }
  if (typeof config.opt === 'string') {
    config.opt = [config.opt];
  }
  // Build the docker command arguments
  cmd = ["volume create"];
  if (config.driver) {
    cmd.push(`--driver ${config.driver}`);
  }
  if (config.label) {
    cmd.push(`--label ${config.label.join(',')}`);
  }
  if (config.name) {
    cmd.push(`--name ${config.name}`);
  }
  if (config.opt) {
    cmd.push(`--opt ${config.opt.join(',')}`);
  }
  cmd = cmd.join(' ');
  this.execute({
    if: config.name,
    cmd: docker.wrap(config, `volume inspect ${config.name}`),
    code: 1,
    code_skipped: 0,
    shy: true
  });
  return this.execute({
    if: function() {
      return !config.name || this.status(-1);
    },
    cmd: docker.wrap(config, cmd)
  });
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');
