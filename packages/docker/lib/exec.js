// Generated by CoffeeScript 2.5.1
// # `nikita.docker.exec`

// Run a command in a running container

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.
// * `container` (string)   
//   Name/ID of the container, required.
// * `code_skipped` (int | array)   
//   The exit code(s) to skip.
// * `machine` (string)   
//   Name of the docker-machine, required using docker-machine.
// * `service` (boolean)   
//   if true, run container as a service, else run as a command, true by default.
// * `uid` (name | uid)   
//   Username or uid.
// * `gid` (name | gid)   
//   Groupname or gid.

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   True if command was executed in container.
// * `stdout`   
//   Stdout value(s) unless `stdout` option is provided.   
// * `stderr`   
//   Stderr value(s) unless `stderr` option is provided.   

// ## Example

// ```javascript
// require('nikita')
// .docker.exec({
//   container: 'myContainer',
//   cmd: '/bin/bash -c "echo toto"'
// }, function(err, {status}){
//   console.log( err ? err.message : 'Command executed: ' + status);
// });
// ```

// ## Schema
var docker, handler, schema;

schema = {
  type: 'object',
  properties: {}
};

// ## Handler
handler = function({
    config,
    log,
    operations: {find}
  }) {
  var cmd, k, ref, v;
  log({
    message: "Entering Docker exec",
    level: 'DEBUG',
    module: 'nikita/lib/docker/exec'
  });
  // Global config
  if (config.docker == null) {
    config.docker = {};
  }
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (config.container == null) {
    // Validate parameters
    throw Error('Missing container');
  }
  if (config.cmd == null) {
    throw Error('Missing cmd');
  }
  if (config.service == null) {
    config.service = false;
  }
  // Construct exec command
  cmd = 'exec';
  if (config.uid != null) {
    cmd += ` -u ${config.uid}`;
    if (config.gid != null) {
      cmd += `:${config.gid}`;
    }
  } else if (config.gid != null) {
    log({
      message: 'config.gid ignored unless config.uid is provided',
      level: 'WARN',
      module: 'nikita/lib/docker/exec'
    });
  }
  cmd += ` ${config.container} ${config.cmd}`;
  delete config.cmd;
  return this.execute({
    cmd: docker.wrap(config, cmd),
    code_skipped: config.code_skipped
  }, function() {    // Note: There is no way to pass additionnal arguments in sync mode without
    // a callback, or we would have ', docker.callback' as next line
    var e;
    try {
      docker.callback.call(null, ...arguments);
    } catch (error) {
      e = error;
      arguments[0] = e;
    }
    return callback(...arguments);
  });
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');
