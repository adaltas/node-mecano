// Generated by CoffeeScript 2.5.1
// # `nikita.docker.save`

// Save Docker images.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if container was saved.
// * `stdout`   
//   Stdout value(s) unless `stdout` option is provided.
// * `stderr`   
//   Stderr value(s) unless `stderr` option is provided.

// ## Example

// ```javascript
// nikita.docker({
//   ssh: ssh
//   output: 'test-image.tar'
//   image: 'test-image'
//   compression: 'gzip'
//   entrypoint: '/bin/true'
// }, function(err, {status}){
//   console.log( err ? err.message : 'Container saved: ' + status);
// })
// ```

// ## Hooks
var handler, on_action, schema;

on_action = function({config}) {
  return config.output != null ? config.output : config.output = config.target;
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'image': {
      type: 'string',
      description: `Name/ID of base image, required.`
    },
    'tag': {
      type: 'string',
      description: `Tag of the image.`
    },
    'output': {
      type: 'string',
      description: `TAR archive output path, required.`
    },
    'target': {
      type: 'string',
      description: `Shortcut for "output" option, required.`
    },
    'boot2docker': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/boot2docker'
    },
    'compose': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/compose'
    },
    'machine': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/machine'
    }
  },
  required: ['image', 'output']
};

// ## Handler
handler = async function({
    config,
    log,
    tools: {find}
  }) {
  var k, ref, v;
  log({
    message: "Entering Docker save",
    level: 'DEBUG',
    module: 'nikita/lib/docker/save'
  });
  // Global config
  config.docker = (await find(function({
      config: {docker}
    }) {
    return docker;
  }));
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  // Saves image to local tmp path, than copy it
  log({
    message: `Extracting image ${config.output} to file:${config.image}`,
    level: 'INFO',
    module: 'nikita/lib/docker/save'
  });
  return this.docker.tools.execute({
    cmd: [`save -o ${config.output} ${config.image}`, config.tag != null ? `:${config.tag}` : void 0].join('')
  });
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  schema: schema
};
