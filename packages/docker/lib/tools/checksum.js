// Generated by CoffeeScript 2.5.1
// # `nikita.docker.tools.checksum`

// Return the checksum of image:tag, if it exists. Note, there is no corresponding
// native docker command.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if command was executed.
// * `checksum`   
//   Image cheksum if it exist, undefined otherwise.

// ## Hooks
var handler, on_action, schema;

on_action = function({config}) {
  if (config.repository) {
    throw Error('Configuration `repository` is deprecated, use `image` instead');
  }
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'cwd': {
      type: 'string',
      description: `Change the build working directory.`
    },
    'image': {
      type: 'string',
      description: `Name of the Docker image present in the registry.`
    },
    'tag': {
      type: 'string',
      default: 'latest',
      description: `Tag of the Docker image, default to latest.`
    },
    'boot2docker': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/boot2docker'
    },
    'compose': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/compose'
    },
    'machine': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/machine'
    }
  }
};

// ## Handler
handler = async function({
    config,
    tools: {find, log}
  }) {
  var checksum, k, ref, status, stdout, v;
  log({
    message: "Entering Docker checksum",
    level: 'DEBUG',
    module: 'nikita/lib/docker/checksum'
  });
  // Global config
  config.docker = (await find(function({
      config: {docker}
    }) {
    return docker;
  }));
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  log({
    message: `Getting image checksum :${config.image}`,
    level: 'DEBUG',
    module: 'nikita/lib/docker/checksum'
  });
  // Run `docker images` with the following config:
  // - `--no-trunc`: display full checksum
  // - `--quiet`: discard headers
  ({status, stdout} = (await this.docker.tools.execute({
    boot2docker: config.boot2docker,
    command: `images --no-trunc --quiet ${config.image}:${config.tag}`,
    compose: config.compose,
    machine: config.machine
  })));
  checksum = stdout === '' ? void 0 : stdout.toString().trim();
  if (status) {
    log({
      message: `Image checksum for ${config.image}: ${checksum}`,
      level: 'INFO',
      module: 'nikita/lib/docker/checksum'
    });
  }
  return {
    status: status,
    checksum: checksum
  };
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  schema: schema
};
