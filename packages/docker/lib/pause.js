// Generated by CoffeeScript 2.5.1
// # `nikita.docker.pause`

// Pause all processes within a container.

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.   
// * `container` (string)   
//   Name/ID of the container, required.
// * `machine` (string)   
//   Name of the docker-machine, required.
// * `code` (int|array)   
//   Expected code(s) returned by the command, int or array of int, default to 0.
// * `code_skipped`   
//   Expected code(s) returned by the command if it has no effect, executed will
//   not be incremented, int or array of int.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if container was pulled.

// ## Example

// ```javascript
// require('nikita')
// .docker.pause({
//   container: 'toto'
// }, function(err, {status}){
//   console.log( err ? err.message : 'Container paused: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema, util;

schema = {
  type: 'object',
  properties: {}
};

// ## Handler
handler = function({
    config,
    log,
    operations: {find}
  }) {
  var k, ref, v;
  log({
    message: "Entering Docker pause",
    level: 'DEBUG',
    module: 'nikita/lib/docker/pause'
  });
  // Global config
  if (config.docker == null) {
    config.docker = {};
  }
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (config.container == null) {
    // Validate parameters
    return callback(Error('Missing container parameter'));
  }
  return this.execute({
    cmd: docker.wrap(config, `pause ${config.container}`)
  }, docker.callback);
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');

util = require('util');
