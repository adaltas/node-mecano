// Generated by CoffeeScript 2.5.1
// # `nikita.docker.stop`

// Stop a started container.

// ## Options

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True unless container was already stopped.

// ## Example

// ```javascript
// require('nikita')
// .docker.stop({
//   container: 'toto'
// }, function(err, {status}){
//   console.log( err ? err.message : 'Container state changed to stopped: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema, util;

schema = {
  type: 'object',
  properties: {
    'container': {
      type: 'string',
      description: `Name/ID of the container.`
    },
    'timeout': {
      type: 'integer',
      description: `Seconds to wait for stop before killing the container (Docker default
is 10).`
    },
    'boot2docker': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/boot2docker'
    },
    'compose': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/compose'
    },
    'machine': {
      $ref: 'module://@nikitajs/docker/src/tools/execute#/properties/machine'
    }
  },
  required: ['container']
};

// ## Handler
handler = async function({
    config,
    log,
    tools: {find}
  }) {
  var k, ref, status, v;
  log({
    message: "Entering Docker stop",
    level: 'DEBUG',
    module: 'nikita/lib/docker/stop'
  });
  // Global config
  config.docker = (await find(function({
      config: {docker}
    }) {
    return docker;
  }));
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  // rm is false by default only if config.service is true
  ({status} = (await this.docker.tools.status({
    shy: true
  }, config)));
  if (status) {
    log({
      message: `Stopping container ${config.container}`,
      level: 'INFO',
      module: 'nikita/lib/docker/stop'
    });
  } else {
    log({
      message: `Container already stopped ${config.container} (Skipping)`,
      level: 'INFO',
      module: 'nikita/lib/docker/stop'
    });
  }
  return this.docker.tools.execute({
    if: status,
    cmd: ['stop', config.timeout != null ? `-t ${config.timeout}` : void 0, `${config.container}`].join(' ')
  });
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');

util = require('util');
