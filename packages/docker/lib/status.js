// Generated by CoffeeScript 2.5.1
// # `nikita.docker.status`

// Return true if container is running. This function is not native to docker. 

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.
// * `container` (string|array)   
//   Name or Id of the container, required.
// * `machine` (string)   
//   Name of the docker-machine, required if using docker-machine.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if container is running.
// * `stdout`   
//   Stdout value(s) unless `stdout` option is provided.
// * `stderr`   
//   Stderr value(s) unless `stderr` option is provided.

// ## Example

// ```javascript
// require('nikita')
// .docker({
//   ssh: ssh
//   target: 'test-image.tar'
//   image: 'test-image'
//   compression: 'gzip'
//   entrypoint: '/bin/true'
// }, function(err, {status}){
//   console.log( err ? err.message : 'Container running: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema;

schema = {
  type: 'object',
  properties: {}
};

// ## Handler
handler = function({
    config,
    log,
    operations: {find}
  }) {
  var cmd, k, ref, v;
  // Global config
  if (config.docker == null) {
    config.docker = {};
  }
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (config.container == null) {
    // Validation
    throw Error('Missing container parameter');
  }
  // Construct exec command
  cmd = `ps | grep '${config.container}'`;
  return this.execute({
    cmd: docker.wrap(config, cmd),
    code_skipped: 1
  }, docker.callback);
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');
