// Generated by CoffeeScript 2.5.1
// # `nikita.docker.kill`

// Send signal to containers using SIGKILL or a specified signal.
// Note if container is not running , SIGKILL is not executed and
// return status is UNMODIFIED. If container does not exist nor is running
// SIGNAL is not sent.

// ## Options

// * `boot2docker` (boolean)   
//   Whether to use boot2docker or not, default to false.
// * `container` (string)   
//   Name/ID of the container, required.   
// * `machine` (string)   
//   Name of the docker-machine, required if using docker-machine.
// * `signal` (int|string)   
//   Use a specified signal. SIGKILL by default.

// ## Callback parameters

// * `err`   
//   Error object if any.
// * `status`   
//   True if container was killed.

// ## Example

// ```javascript
// require('nikita')
// .docker.kill({
//   container: 'toto',
//   signal: 9
// }, function(err, status){  
//   console.log( err ? err.message : 'Container killed: ' + status);
// })
// ```

// ## Schema
var docker, handler, schema;

schema = {
  type: 'object',
  properties: {}
};

// ## Handler
handler = function({
    config,
    log,
    operations: {find}
  }) {
  var cmd, k, ref, v;
  log({
    message: "Entering Docker kill",
    level: 'DEBUG',
    module: 'nikita/lib/docker/kill'
  });
  // Global config
  if (config.docker == null) {
    config.docker = {};
  }
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  if (config.container == null) {
    // Validate parameters
    return callback(Error('Missing container parameter'));
  }
  cmd = 'kill';
  if (config.signal != null) {
    cmd += ` -s ${config.signal}`;
  }
  cmd += ` ${config.container}`;
  this.execute({
    cmd: docker.wrap(config, `ps | grep '${config.container}' | grep 'Up'`),
    code_skipped: 1
  }, docker.callback);
  return this.execute({
    if: function() {
      return this.status(-1);
    },
    cmd: docker.wrap(config, cmd)
  }, docker.callback);
};

// ## Exports
module.exports = {
  handler: handler,
  schema: schema
};

// ## Dependencies
docker = require('./utils');
