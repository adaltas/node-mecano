// Generated by CoffeeScript 2.5.1
var array, snake_case;

array = require('./array');

({snake_case} = require('./string'));

module.exports = {
  clean: function(content, undefinedOnly) {
    var k, v;
    for (k in content) {
      v = content[k];
      if (v && typeof v === 'object') {
        module.exports.clean(v, undefinedOnly);
        continue;
      }
      if (typeof v === 'undefined') {
        delete content[k];
      }
      if (!undefinedOnly && v === null) {
        delete content[k];
      }
    }
    return content;
  },
  copy: function(source, properties) {
    var i, len, obj, property;
    obj = {};
    for (i = 0, len = properties.length; i < len; i++) {
      property = properties[i];
      if (source[property] !== void 0) {
        obj[property] = source[property];
      }
    }
    return obj;
  },
  diff: function(obj1, obj2, keys) {
    var diff, k, keys1, keys2, v;
    if (!keys) {
      keys1 = Object.keys(obj1);
      keys2 = Object.keys(obj2);
      keys = array.merge(keys1, keys2, array.unique(keys1));
    }
    diff = {};
    for (k in obj1) {
      v = obj1[k];
      if (!(keys.indexOf(k) >= 0)) {
        continue;
      }
      if (obj2[k] === v) {
        continue;
      }
      diff[k] = [];
      diff[k][0] = v;
    }
    for (k in obj2) {
      v = obj2[k];
      if (!(keys.indexOf(k) >= 0)) {
        continue;
      }
      if (obj1[k] === v) {
        continue;
      }
      if (diff[k] == null) {
        diff[k] = [];
      }
      diff[k][1] = v;
    }
    return diff;
  },
  equals: function(obj1, obj2, keys) {
    var i, k, keys1, keys2, len;
    keys1 = Object.keys(obj1);
    keys2 = Object.keys(obj2);
    if (keys) {
      keys1 = keys1.filter(function(k) {
        return keys.indexOf(k) !== -1;
      });
      keys2 = keys2.filter(function(k) {
        return keys.indexOf(k) !== -1;
      });
    } else {
      keys = keys1;
    }
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      if (obj1[k] !== obj2[k]) {
        return false;
      }
    }
    return true;
  },
  filter: function(source, black, white) {
    var i, key, len, obj, ref;
    if (black == null) {
      black = [];
    }
    obj = {};
    ref = (white != null ? white : Object.keys(source));
    // If white list, only use the selected list
    // Otherwise clone it all
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (source.hasOwnProperty(key) && !black.includes(key)) {
        // unless part of black list
        obj[key] = source[key];
      }
    }
    return obj;
  },
  snake_case: function(source) {
    var key, obj, value;
    obj = {};
    for (key in source) {
      value = source[key];
      obj[snake_case(key)] = value;
    }
    return obj;
  }
};
