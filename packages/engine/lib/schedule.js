// Generated by CoffeeScript 2.5.1
module.exports = function() {
  var events, running, scheduler, stack;
  stack = [];
  running = false;
  events = {
    end: []
  };
  return scheduler = {
    on_end: function(fn) {
      events.end.push(fn);
      return this;
    },
    pump: function() {
      var fn, i, len, ref, reject, res, resolve, results;
      if (running) {
        return;
      }
      running = true;
      if (this.has_next()) {
        [fn, resolve, reject] = this.next();
        res = fn.call();
        return res.then(function() {
          running = false;
          resolve.apply(fn, arguments);
          return setImmediate(function() {
            return scheduler.pump();
          });
        }, function(err) {
          var i, len, ref;
          running = false;
          ref = events.end;
          for (i = 0, len = ref.length; i < len; i++) {
            fn = ref[i];
            fn.call();
          }
          return reject(err);
        });
      } else {
        ref = events.end;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          fn = ref[i];
          results.push(fn.call());
        }
        return results;
      }
    },
    has_next: function() {
      return stack.length;
    },
    next: function() {
      return stack.shift();
    },
    add: function(fn) {
      var prom;
      prom = new Promise(function(resolve, reject) {
        stack.push([fn, resolve, reject]);
        // Pump execution
        return setImmediate(function() {
          return scheduler.pump();
        });
      });
      return prom;
    }
  };
};
