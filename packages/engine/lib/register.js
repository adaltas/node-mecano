// Generated by CoffeeScript 2.5.1
var error, registry;

registry = require('./registry');

error = require('./utils/error');

module.exports = {
  '': {
    handler: (function() {})
  },
  'call': {
    '': {}
  },
  'execute': {
    '': '@nikitajs/engine/lib/actions/execute',
    'assert': '@nikitajs/engine/lib/actions/execute/assert'
  },
  'fs': {
    'base': {
      'chmod': '@nikitajs/engine/lib/actions/fs/base/chmod',
      'chown': '@nikitajs/engine/lib/actions/fs/base/chown',
      'copy': '@nikitajs/engine/lib/actions/fs/base/copy',
      'createReadStream': '@nikitajs/engine/lib/actions/fs/base/createReadStream',
      'createWriteStream': '@nikitajs/engine/lib/actions/fs/base/createWriteStream',
      'exists': '@nikitajs/engine/lib/actions/fs/base/exists',
      'lstat': '@nikitajs/engine/lib/actions/fs/base/lstat',
      'mkdir': '@nikitajs/engine/lib/actions/fs/base/mkdir',
      'readdir': '@nikitajs/engine/lib/actions/fs/base/readdir',
      'readFile': '@nikitajs/engine/lib/actions/fs/base/readFile',
      'readlink': '@nikitajs/engine/lib/actions/fs/base/readlink',
      'rename': '@nikitajs/engine/lib/actions/fs/base/rename',
      'rmdir': '@nikitajs/engine/lib/actions/fs/base/rmdir',
      'stat': '@nikitajs/engine/lib/actions/fs/base/stat',
      'symlink': '@nikitajs/engine/lib/actions/fs/base/symlink',
      'unlink': '@nikitajs/engine/lib/actions/fs/base/unlink',
      'writeFile': '@nikitajs/engine/lib/actions/fs/base/writeFile'
    },
    'assert': '@nikitajs/engine/lib/actions/fs/assert',
    'chmod': '@nikitajs/engine/lib/actions/fs/chmod',
    'chown': '@nikitajs/engine/lib/actions/fs/chown',
    'copy': '@nikitajs/engine/lib/actions/fs/copy',
    'glob': '@nikitajs/engine/lib/actions/fs/glob',
    'hash': '@nikitajs/engine/lib/actions/fs/hash',
    'link': '@nikitajs/engine/lib/actions/fs/link',
    'mkdir': '@nikitajs/engine/lib/actions/fs/mkdir',
    'move': '@nikitajs/engine/lib/actions/fs/move',
    'remove': '@nikitajs/engine/lib/actions/fs/remove'
  },
  'log': {
    '': {
      handler: (function() {})
    },
    'cli': '@nikitajs/engine/lib/actions/log/cli',
    'csv': '@nikitajs/engine/lib/actions/log/csv',
    'fs': '@nikitajs/engine/lib/actions/log/fs',
    'md': '@nikitajs/engine/lib/actions/log/md'
  },
  'registry': {
    'get': {
      metadata: {
        raw: true
      },
      handler: function({
          parent,
          args: [namespace]
        }) {
        return parent.registry.get(namespace);
      }
    },
    'register': {
      metadata: {
        raw: true
      },
      handler: function({
          parent,
          args: [namespace, action]
        }) {
        return parent.registry.register(namespace, action);
      }
    },
    'registered': {
      metadata: {
        raw: true
      },
      handler: function({
          parent,
          args: [namespace]
        }) {
        return parent.registry.registered(namespace);
      }
    },
    'unregister': {
      metadata: {
        raw: true
      },
      handler: function({
          parent,
          args: [namespace]
        }) {
        return parent.registry.unregister(namespace);
      }
    }
  },
  'ssh': {
    '': '@nikitajs/engine/lib/actions/ssh',
    'open': '@nikitajs/engine/lib/actions/ssh/open',
    'close': '@nikitajs/engine/lib/actions/ssh/close',
    'root': '@nikitajs/engine/lib/actions/ssh/root'
  },
  // 'status':
  //   metadata: raw: true
  //   handler: ({parent, args: [position]}) ->
  //     if typeof position is 'number'
  //       parent.children.slice(position)[0].output.status
  //     else unless position?
  //       parent.children.some (child) -> child.output.status
  //     else
  //       throw error 'NIKITA_STATUS_POSITION_INVALID', [
  //         'argument position must be an integer if defined,'
  //         "get #{JSON.stringify position}"
  //       ]
  'wait': '@nikitajs/engine/lib/actions/wait'
};

(async function() {
  return (await registry.register(module.exports));
})();
