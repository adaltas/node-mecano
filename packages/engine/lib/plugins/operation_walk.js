// Generated by CoffeeScript 2.5.1
var error, validate, walk;

error = require('../utils/error');

walk = async function(action, walker) {
  var precious, results;
  precious = (await walker(action, walker));
  results = [];
  if (precious !== void 0) {
    results.push(precious);
  }
  if (action.parent) {
    results.push(...((await walk(action.parent, walker))));
  }
  return results;
};

validate = function(action, args) {
  var walker;
  if (args.length === 1) {
    [walker] = args;
  } else if (args.length === 2) {
    [action, walker] = args;
  } else {
    if (!action) {
      throw error('OPERATION_WALK_INVALID_ARGUMENT', ['action signature is expected to be', '`walker` or `action, walker`', `got ${JSON.stringify(args)}`]);
    }
  }
  if (!action) {
    throw error('OPERATION_WALK_ACTION_WALKER_REQUIRED', ['argument `action` is missing and must be a valid action']);
  }
  if (!walker) {
    throw error('OPERATION_WALK_WALKER_REQUIRED', ['argument `walker` is missing and must be a function']);
  }
  if (typeof walker !== 'function') {
    throw error('OPERATION_WALK_WALKER_INVALID', ['argument `walker` is missing and must be a function']);
  }
  return [action, walker];
};

module.exports = function(action) {
  return {
    module: '@nikitajs/engine/src/plugins/operation_walk',
    hooks: {
      'nikita:session:normalize': function(action, handler) {
        return function() {
          // Handler execution
          action = handler.apply(null, arguments);
          // Register function
          if (action.operations == null) {
            action.operations = {};
          }
          action.operations.walk = async function() {
            var walker;
            [action, walker] = validate(action, arguments);
            return (await walk(action, walker));
          };
          // Register action
          action.registry.register(['operations', 'walk'], {
            metadata: {
              raw: true
            },
            handler: async function(action) {
              var walker;
              [action, walker] = validate(action, action.args);
              return (await walk(action.parent, walker));
            }
          });
          return action;
        };
      }
    }
  };
};
