// Generated by CoffeeScript 2.5.1
var error, merge;

({merge} = require('mixme'));

error = require('../utils/error');

module.exports = function() {
  return {
    module: '@nikitajs/engine/src/metadata/retry',
    hooks: {
      'nikita:session:normalize': function(action) {
        var i, len, property, ref, results;
        ref = ['attempt', 'sleep', 'retry'];
        // Move property from action to metadata
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          if (action.hasOwnProperty(property)) {
            action.metadata[property] = action[property];
            results.push(delete action[property]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      'nikita:session:action': function(action, handler) {
        var base, base1, base2, i, len, property, ref;
        if ((base = action.metadata).attempt == null) {
          base.attempt = 0;
        }
        if ((base1 = action.metadata).retry == null) {
          base1.retry = 1;
        }
        if ((base2 = action.metadata).sleep == null) {
          base2.sleep = 3000;
        }
        ref = ['attempt', 'sleep', 'retry'];
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          if (typeof action.metadata[property] === 'number') {
            if (action.metadata[property] < 0) {
              throw error(`METADATA_${property.toUpperCase()}_INVALID_RANGE`, [`configuration \`${property}\` expect a number above or equal to 0,`, `got ${action.metadata[property]}.`]);
            }
          } else if (typeof action.metadata[property] !== 'boolean') {
            throw error(`METADATA_${property.toUpperCase()}_INVALID_VALUE`, [`configuration \`${property}\` expect a number or a boolean value,`, `got ${JSON.stringify(action.metadata[property])}.`]);
          }
        }
        return function(action) {
          var args, config, failure, retry, run;
          args = arguments;
          ({retry} = action.metadata);
          config = merge({}, action.config);
          // Handle error
          failure = function(err) {
            if (retry !== true && action.metadata.attempt >= retry - 1) {
              throw err;
            }
            // Increment the attempt metadata
            action.metadata.attempt++;
            action.config = merge({}, config);
            // Reschedule
            return run();
          };
          run = function() {
            var err, output;
            try {
              output = handler.call(this, ...args);
              if (output && output.catch) {
                if (output.catch) {
                  // Note, should.js return a PromisedAssertion with a `then` but
                  // no `catch` function
                  return output.catch(failure);
                }
              } else {
                return output;
              }
            } catch (error1) {
              err = error1;
              return failure(err);
            }
          };
          return run();
        };
      }
    }
  };
};
