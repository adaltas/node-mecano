// Generated by CoffeeScript 2.5.1
module.exports = function() {
  return {
    module: '@nikitajs/engine/src/metadata/raw',
    hooks: {
      'nikita:registry:normalize': function(action) {
        var base, base1, base2;
        if (action.metadata == null) {
          action.metadata = {};
        }
        // for property in ['raw', 'raw_input', 'raw_output']
        //   if action.hasOwnProperty property
        //     console.log action
        //     action.metadata[property] = action[property]
        //     delete action[property]
        if ((base = action.metadata).raw == null) {
          base.raw = false;
        }
        if ((base1 = action.metadata).raw_input == null) {
          base1.raw_input = action.metadata.raw;
        }
        return (base2 = action.metadata).raw_output != null ? base2.raw_output : base2.raw_output = action.metadata.raw;
      },
      'nikita:session:normalize': function(action) {
        var i, len, property, ref, results;
        ref = ['raw', 'raw_input', 'raw_output'];
        // Move property from action to metadata
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          if (action.hasOwnProperty(property)) {
            action.metadata[property] = action[property];
            results.push(delete action[property]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      'nikita:session:action': function(action) {
        var base, base1, base2;
        if ((base = action.metadata).raw == null) {
          base.raw = false;
        }
        if ((base1 = action.metadata).raw_input == null) {
          base1.raw_input = action.metadata.raw;
        }
        return (base2 = action.metadata).raw_output != null ? base2.raw_output : base2.raw_output = action.metadata.raw;
      }
    }
  };
};
