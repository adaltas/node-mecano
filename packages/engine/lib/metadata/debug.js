// Generated by CoffeeScript 2.5.1
var error, stream;

error = require('../utils/error');

stream = require('stream');

/*
Print log information to the console.

Only the logs which type match "text", "stdin", "stdout_stream", "stderr_stream" are handled.

TODO: detect/force isTTY
*/
module.exports = function() {
  return {
    module: '@nikitajs/engine/src/metadata/debug',
    require: '@nikitajs/engine/src/plugins/log',
    hooks: {
      'nikita:session:normalize': function(action) {
        // Move property from action to metadata
        if (action.hasOwnProperty('debug')) {
          action.metadata.debug = action.debug;
          return delete action.debug;
        }
      },
      'nikita:session:action': function(action) {
        var debug;
        debug = action.metadata.debug || false;
        if (!(typeof debug === 'boolean' || debug === 'stdout' || debug instanceof stream.Writable)) {
          throw error('METADATA_DEBUG_INVALID_VALUE', ["configuration `debug` expect a boolean value,", "the string \"stdout\", or a Node.js Stream Writer,", `got ${JSON.stringify(debug)}.`]);
        }
        if (!debug) {
          action.metadata.debug = false;
          return;
        }
        debug = action.metadata.debug = {
          ws: debug === 'stdout' ? action.metadata.debug.ws = process.stdout : debug instanceof stream.Writable ? action.metadata.debug.ws = debug : action.metadata.debug.ws = process.stderr,
          listener: function(log) {
            var msg, ref, ref1;
            if (!(((ref = log.type) === 'stdout_stream' || ref === 'stderr_stream') && log.message === null)) {
              msg = typeof log.message === 'string' ? log.message.trim() : typeof log.message === 'number' ? log.message : ((ref1 = log.message) != null ? ref1.toString : void 0) != null ? log.message.toString().trim() : JSON.stringify(log.message);
              msg = `[${log.depth}.${log.level} ${log.module}] ${msg}`;
              msg = (function() {
                switch (log.type) {
                  case 'stdin':
                    return `\x1b[33m${msg}\x1b[39m`;
                  case 'stdout_stream':
                    return `\x1b[36m${msg}\x1b[39m`;
                  case 'stderr_stream':
                    return `\x1b[35m${msg}\x1b[39m`;
                  default:
                    return `\x1b[32m${msg}\x1b[39m`;
                }
              })();
              return debug.ws.write(`${msg}\n`);
            }
          }
        };
        action.operations.events.addListener('text', debug.listener);
        action.operations.events.addListener('stdin', debug.listener);
        action.operations.events.addListener('stdout_stream', debug.listener);
        return action.operations.events.addListener('stderr_stream', debug.listener);
      },
      'nikita:session:result': {
        // after: '@nikitajs/engine/src/plugins/log'
        handler: function({action}) {
          var debug;
          debug = action.metadata.debug;
          if (!(debug && debug.listener)) { // undefined with invalid value error
            return;
          }
          action.operations.events.removeListener('text', debug.listener);
          action.operations.events.removeListener('stdin', debug.listener);
          action.operations.events.removeListener('stdout_stream', debug.listener);
          return action.operations.events.removeListener('stderr_stream', debug.listener);
        }
      }
    }
  };
};
