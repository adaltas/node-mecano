// Generated by CoffeeScript 2.5.1
// # `nikita.fs.remove`

// Recursively remove files, directories and links.

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Value is "true" if files were removed.   

// ## Implementation details

// Files are removed localling using the Unix "rm" utility. Porting [rimraf] over
// SSH would be too slow.

// ## Simple example

// ```js
// require('nikita')
// .system.remove('./some/dir', function(err, {status}){
//   console.log(err ? err.message : "File removed: " + status);
// });
// ```

// ## Removing a directory unless a given file exists

// ```js
// require('nikita')
// .system.remove({
//   target: './some/dir',
//   unless_exists: './some/file'
// }, function(err, {status}){
//   console.log(err ? err.message : "File removed: " + status);
// });
// ```

// ## Removing multiple files and directories

// ```js
// require('nikita')
// .system.remove([
//   { target: './some/dir', unless_exists: './some/file' },
//   './some/file'
// ], function(err, status){
//   console.log(err ? err.message : 'File removed: ' + status);
// });
// ```

// ## Hook
var handler, on_action, schema;

on_action = function({config, metadata}) {
  if (metadata.argument != null) {
    // Validate parameters
    config.target = metadata.argument;
  }
  if (config.target == null) {
    config.target = config.source;
  }
  if (config.target == null) {
    throw Error("Missing option: \"target\"");
  }
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'source': {
      type: 'string',
      description: `Alias for "target".`
    },
    'target': {
      oneOf: [
        {
          type: 'string'
        },
        {
          type: 'array'
        }
      ],
      description: `File, directory or glob (pattern matching based on wildcard characters).   `
    }
  }
};

// ## Handler
handler = async function({
    config,
    log,
    metadata,
    operations: {status, events},
    ssh
  }) {
  var file, files, i, len;
  log({
    message: "Entering remove",
    level: 'DEBUG',
    module: 'nikita/lib/fs/remove'
  });
  // SSH connection
  ssh = this.ssh(config.ssh);
  // Start real work
  ({files} = (await this.fs.glob(config.target)));
  for (i = 0, len = files.length; i < len; i++) {
    file = files[i];
    log({
      message: `Removing file ${file}`,
      level: 'INFO',
      module: 'nikita/lib/fs/remove'
    });
    this.execute({
      cmd: `rm -rf '${file}'`
    });
  }
  return {};
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  schema: schema
};

// [rimraf]: https://github.com/isaacs/rimraf
