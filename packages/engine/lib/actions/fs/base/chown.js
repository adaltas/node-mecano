// Generated by CoffeeScript 2.5.1
// # `nikita.fs.chown`

// Change ownership of a file.

// ## Hook
var error, handler, on_action, schema;

on_action = function({config, metadata}) {
  if (metadata.argument != null) {
    config.target = metadata.argument;
  }
  if ((typeof config.uid === 'string') && /\d+/.test(config.uid)) {
    // String to integer coercion
    config.uid = parseInt(config.uid);
  }
  if ((typeof config.gid === 'string') && /\d+/.test(config.gid)) {
    return config.gid = parseInt(config.gid);
  }
};

// ## Schema
schema = {
  type: 'object',
  properties: {
    'gid': {
      type: 'integer',
      description: `Unix group name or id who owns the target file.`
    },
    'target': {
      type: 'string',
      description: `Location of the file which permissions will change.`
    },
    'uid': {
      type: 'integer',
      description: `Unix user name or id who owns the target file.`
    }
  },
  required: ['target']
};

// ## Handler
handler = function({config}) {
  this.log({
    message: "Entering fs.chown",
    level: 'DEBUG',
    module: 'nikita/lib/fs/chown'
  });
  if (config.uid === false) {
    // Normalization
    config.uid = null;
  }
  if (config.gid === false) {
    config.gid = null;
  }
  if (!((config.uid != null) || (config.gid != null))) {
    // Validation
    throw Error("Missing one of uid or gid option");
  }
  return this.execute([config.uid != null ? `chown ${config.uid} ${config.target}` : void 0, config.gid != null ? `chgrp ${config.gid} ${config.target}` : void 0].join('\n'));
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  metadata: {
    log: false,
    raw_output: true
  },
  schema: schema
};

// ## Dependencies
error = require('../../../utils/error');
