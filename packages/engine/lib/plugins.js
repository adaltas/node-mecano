// Generated by CoffeeScript 2.5.1
var error, is_object_literal;

({is_object_literal} = require('mixme'));

error = require('./utils/error');

module.exports = function({action, chain, parent, plugins = []} = {}) {
  var i, len, obj, plugin, store;
  // Internal plugin store
  store = [];
  // Public API definition
  obj = {
    // Register new plugins
    register: function(hooks) {
      if (!is_object_literal(hooks)) {
        throw error('PLUGINS_INVALID_HOOK_REGISTRATION', ['hooks must consist of keys representing the hook names', 'associated with function implementing the hook,', `got ${hook}.`]);
      }
      store.push(hooks);
      return chain || this;
    },
    // Call a hook against each registered plugin matching the hook name
    hook: async function({args = [], handler, hooks = [], name, silent}) {
      var hook, i, j, len, len1;
      if (arguments.length !== 1) {
        throw error('PLUGINS_INVALID_ARGUMENTS_NUMBER', ['function hook expect 1 object argument,', `got ${arguments.length} arguments.`]);
      } else if (!is_object_literal(arguments[0])) {
        throw error('PLUGINS_INVALID_ARGUMENT_PROPERTIES', ['function hook expect argument to be a literal object', 'with the name, args, hooks and handler properties,', `got ${arguments[0]} arguments.`]);
      } else if (typeof name !== 'string') {
        throw error('PLUGINS_INVALID_ARGUMENT_NAME', ['function hook expect a name properties in its first argument,', `got ${arguments[0]} argument.`]);
      }
      if (typeof hooks === 'function') {
        hooks = [hooks];
      }
      // Call parent hooks
      if (parent) {
        handler = (await parent.hook.call(parent, {
          name: name,
          args: args,
          hooks: hooks,
          handler: handler,
          silent: true
        }));
      }
// Call local hooks
      for (i = 0, len = store.length; i < len; i++) {
        hook = store[i];
        if (hook[name]) {
          handler = (await hook[name].call(this, args, handler));
        }
      }
      // Call user provided hooks
      if (hooks) {
        for (j = 0, len1 = hooks.length; j < len1; j++) {
          hook = hooks[j];
          handler = (await hook.call(this, args, handler));
        }
      }
      if (silent) {
        // Call the final handler
        return handler;
      }
      if (handler) {
        return handler.call(this, args);
      }
    }
  };
// Register initial plugins
  for (i = 0, len = plugins.length; i < len; i++) {
    plugin = plugins[i];
    obj.register(plugin(action));
  }
  // return the object
  return obj;
};
