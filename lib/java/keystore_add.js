// Generated by CoffeeScript 1.12.6
var path;

module.exports = function(options) {
  var files, tmp_location;
  if (!options.keystore) {
    throw Error("Required option 'keystore'");
  }
  if (!options.storepass) {
    throw Error("Required option 'storepass'");
  }
  if (options.cert && !options.key) {
    throw Error("Required option 'key' for certificate");
  }
  if (options.cert && !options.keypass) {
    throw Error("Required option 'keypass' for certificate");
  }
  if (options.cert && !options.name) {
    throw Error("Required option 'name' for certificate");
  }
  if (options.parent == null) {
    options.parent = {};
  }
  if (options.openssl == null) {
    options.openssl = 'openssl';
  }
  tmp_location = "/tmp/nikita/java_keystore_" + (Date.now());
  files = {
    cert: (options.cert != null) && options.local ? tmp_location + "/" + (path.basename(options.cert)) : options.cert,
    cacert: options.local ? tmp_location + "/" + (path.basename(options.cacert)) : options.cacert,
    key: (options.key != null) && options.local ? tmp_location + "/" + (path.basename(options.key)) : options.key
  };
  this.system.mkdir({
    target: "" + tmp_location,
    mode: 0x1c0,
    shy: true
  });
  this.file.download({
    "if": options.local && options.cacert,
    source: options.cacert,
    target: files.cacert,
    mode: 0x180,
    shy: true
  });
  this.file.download({
    "if": options.local && options.cert,
    source: options.cert,
    target: files.cert,
    mode: 0x180,
    shy: true
  });
  this.file.download({
    "if": options.local && options.key,
    source: options.key,
    target: files.key,
    mode: 0x180,
    shy: true
  });
  this.system.mkdir(options, options.parent, {
    header: null,
    unless_exists: true,
    target: path.dirname(options.keystore)
  });
  this.system.execute({
    bash: true,
    cmd: "cleanup () {\n  [ -n \"" + (options.cacert ? '1' : '') + "\" ] || rm -rf " + tmp_location + ";\n}\nif ! which " + options.openssl + "; then echo 'OpenSSL command line tool not detected'; cleanup; exit 4; fi\n[ -f " + files.cert + " ] || (cleanup; exit 6)\n# mkdir -p -m 700 " + tmp_location + "\nuser=`" + options.openssl + " x509  -noout -in \"" + files.cert + "\" -md5 -fingerprint | sed 's/\\(.*\\)=\\(.*\\)/\\2/' | cat`\nkeystore=`keytool -list -v -keystore " + options.keystore + " -alias " + options.name + " -storepass " + options.storepass + " | grep MD5: | sed -E 's/.+MD5: +(.*)/\\1/'`\necho \"User Certificate: $user\"\necho \"Keystore Certificate: $keystore\"\nif [[ \"$user\" == \"$keystore\" ]]; then cleanup; exit 5; fi\n# Create a PKCS12 file that contains key and certificate\n" + options.openssl + " pkcs12 -export -in \"" + files.cert + "\" -inkey \"" + files.key + "\" -out \"" + tmp_location + "/pkcs12\" -name " + options.name + " -password pass:" + options.keypass + "\n  #-CAfile \"" + tmp_location + "/cacert\" -caname " + options.caname + " # Import PKCS12 into keystore\nkeytool -noprompt -importkeystore -destkeystore " + options.keystore + " -deststorepass " + options.storepass + " -destkeypass " + options.keypass + " -srckeystore \"" + tmp_location + "/pkcs12\" -srcstoretype PKCS12 -srcstorepass " + options.keypass + " -alias " + options.name,
    trap: true,
    "if": !!options.cert,
    code_skipped: 5
  }, function(err) {
    if ((err != null ? err.code : void 0) === 4) {
      throw Error("OpenSSL command line tool not detected");
    }
    if ((err != null ? err.code : void 0) === 6) {
      throw Error("Keystore file does not exists");
    }
  });
  this.system.execute({
    "if": options.cacert,
    bash: true,
    cmd: "# cleanup () { rm -rf " + tmp_location + "; }\ncleanup () { echo 'clean'; }\n# Check password\nif [ -f " + options.keystore + " ] && ! keytool -list -keystore " + options.keystore + " -storepass " + options.storepass + " >/dev/null; then\n  # Keystore password is invalid, change it manually with:\n  # keytool -storepasswd -keystore " + options.keystore + " -storepass " + options.storepass + "\n  cleanup; exit 2\nfi\n[ -f " + files.cacert + " ] || (echo 'CA file doesnt not exists: " + files.cacert + " 1>&2'; cleanup; exit 3)\n# Import CACert\nPEM_FILE=" + files.cacert + "\nCERTS=$(grep 'END CERTIFICATE' $PEM_FILE| wc -l)\ncode=5\nfor N in $(seq 0 $(($CERTS - 1))); do\n  if [[ $CERTS == '1' ]]; then\n    ALIAS=\"" + options.caname + "\"\n  else\n    ALIAS=\"" + options.caname + "-$N\"\n  fi\n  # Isolate cert into a file\n  CACERT_FILE=" + tmp_location + "/$ALIAS\n  cat $PEM_FILE | awk \"n==$N { print }; /END CERTIFICATE/ { n++ }\" > $CACERT_FILE\n  # Read user CACert signature\n  user=`" + options.openssl + " x509  -noout -in \"$CACERT_FILE\" -md5 -fingerprint | sed 's/\\(.*\\)=\\(.*\\)/\\2/'`\n  # Read registered CACert signature\n  keystore=`keytool -list -v -keystore " + options.keystore + " -alias $ALIAS -storepass " + options.storepass + " | grep MD5: | sed -E 's/.+MD5: +(.*)/\\1/'`\n  echo \"User CA Cert: $user\"\n  echo \"Keystore CA Cert: $keystore\"\n  if [[ \"$user\" == \"$keystore\" ]]; then echo 'Identical Signature'; code=5; continue; fi\n  # Remove CACert if signature doesnt match\n  if [[ \"$keystore\" != \"\" ]]; then\n    keytool -delete -keystore " + options.keystore + " -storepass " + options.storepass + " -alias $ALIAS\n  fi\n  keytool -noprompt -import -trustcacerts -alias $ALIAS -keystore " + options.keystore + " -storepass " + options.storepass + " -file " + tmp_location + "/$ALIAS\n  code=0\ndone\ncleanup\nexit $code",
    trap: true,
    code_skipped: 5
  }, function(err) {
    if ((err != null ? err.code : void 0) === 3) {
      throw Error("CA file does not exist: " + files.cacert);
    }
  });
  this.system.chown({
    target: options.keystore,
    uid: options.uid,
    gid: options.gid,
    "if": (options.uid != null) || (options.gid != null)
  });
  return this.system.chmod({
    target: options.keystore,
    mode: options.mode,
    "if": options.mode != null
  });
};

path = require('path');
