// Generated by CoffeeScript 2.3.1
// # `nikita.tools.git(options, [callback])`

// Create and synchronize a git repository.

// ## Options

// * `source`   
//   Git source repository address.   
// * `target`   
//   Directory where to clone the repository.   
// * `revision`   
//   Git revision, branch or tag.   

// ## Callback Parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Value "true" if repository was created or modified.   

// ## Example

// The following action make sure the git repository is synchronized to the latest
// HEAD revision.

// ```javascript
// require('nikita').tools.git({
//   source: 'https://github.com/wdavidw/node-nikita.git'
//   target: '/tmp/nikita'
// }, function(err, synchronized){
//   console.log(err ? err.message : 'Repo was synchronized: ' + synchronized);
// });
// ```

// ## Source Code
var path;

module.exports = function(options) {
  var repo_exists, repo_uptodate, ssh;
  this.log({
    message: "Entering git",
    level: 'DEBUG',
    module: 'nikita/lib/tools/git'
  });
  // SSH connection
  ssh = this.ssh(options.ssh);
  // Sanitize options
  if (options.revision == null) {
    options.revision = 'HEAD';
  }
  // Start real work
  repo_exists = false;
  repo_uptodate = false;
  this.call(function(_, callback) {
    return this.fs.exists({
      ssh: options.ssh,
      target: options.target
    }, function(err, {exists}) {
      var gitDir;
      if (err) {
        return callback(err);
      }
      repo_exists = exists;
      if (!exists) { // todo, isolate inside call when they receive conditions
        return callback();
      }
      // return callback Error "Destination not a directory, got #{options.target}" unless stat.isDirectory()
      gitDir = `${options.target}/.git`;
      return this.fs.exists({
        ssh: options.ssh,
        target: gitDir
      }, function(err, {exists}) {
        if (!exists) {
          return callback(Error("Not a git repository"));
        }
        return callback();
      });
    });
  });
  this.system.execute({
    cmd: `git clone ${options.source} ${options.target}`,
    cwd: path.dirname(options.target),
    unless: function() {
      return repo_exists;
    }
  });
  this.system.execute({
    cmd: `current=\`git log --pretty=format:'%H' -n 1\`\ntarget=\`git rev-list --max-count=1 ${options.revision}\`\necho "current revision: $current"\necho "expected revision: $target"\nif [ $current != $target ]; then exit 3; fi`,
    // stdout: process.stdout
    cwd: options.target,
    trap: true,
    code_skipped: 3,
    if: function() {
      return repo_exists;
    },
    shy: true
  }, function(err, {status}) {
    if (err) {
      throw err;
    }
    return repo_uptodate = status;
  });
  return this.system.execute({
    cmd: `git checkout ${options.revision}`,
    cwd: options.target,
    unless: function() {
      return repo_uptodate;
    }
  });
};

// ## Dependencies
path = require('path');
