// Generated by CoffeeScript 2.3.1
var Minimatch, exec, getprefix, path, string;

path = require('path');

({Minimatch} = require('minimatch'));

exec = require('ssh2-exec');

string = require('./string');

getprefix = function(pattern) {
  var n, prefix;
  prefix = null;
  n = 0;
  while (typeof pattern[n] === "string") {
    n++;
  }
  // now n is the index of the first one that is *not* a string.
  // see if there's anything else
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join('/');
      return prefix;
    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      return null;
    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n);
      prefix = prefix.join('/');
      return prefix;
  }
};

/*
Important: for now, only the "dot" options has been tested.
*/
module.exports = function(ssh, pattern, options, callback) {
  var child, cmd, i, len, minimatch, prefix, ref, s, stdout;
  if (arguments.length === 3) {
    callback = options;
    options = {};
  }
  pattern = path.normalize(pattern);
  minimatch = new Minimatch(pattern, options);
  cmd = "find";
  ref = minimatch.set;
  for (i = 0, len = ref.length; i < len; i++) {
    s = ref[i];
    prefix = getprefix(s);
    cmd += ` ${prefix}`;
  }
  child = exec(ssh, cmd, {
    shell: true //, timeout: 0, maxBuffer: 2000*1024
  });
  stdout = [];
  child.stdout.on('data', function(data) {
    return stdout.push(data.toString());
  });
  child.on('error', callback);
  return child.on('close', function(code) {
    var files, j, len1, n, ref1;
    files = string.lines(stdout.join('').trim());
    files = files.filter(function(file) {
      return minimatch.match(file);
    });
    ref1 = minimatch.set;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      s = ref1[j];
      n = 0;
      while (typeof s[n] === "string") {
        n++;
      }
      if (s[n] === Minimatch.GLOBSTAR) {
        prefix = getprefix(s);
        if (prefix) {
          files.unshift(prefix);
        }
      }
    }
    return callback(null, files);
  });
};
