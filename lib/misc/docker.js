// Generated by CoffeeScript 2.3.1
var string;

string = require('./string');

module.exports.options = ['api-cors-header', 'bridge', 'bip', 'debug', 'daemon', 'default-gateway', 'default-gateway-v6', 'default-ulimit', 'dns', 'dns-search', 'exec-driver', 'exec-opt', 'exec-root', 'fixed-cidr', 'fixed-cidr-v6', 'group', 'graph', 'host', 'help', 'icc', 'insecure-registry', 'ip', 'ip-forward', 'ip-masq', 'iptables', 'ipv6', 'log-level', 'label', 'log-driver', 'log-opt', 'mtu', 'pidfile', 'registry-mirror', 'storage-driver', 'selinux-enabled', 'storage-opt', 'tls', 'tlscacert', 'tlscert', 'tlskey', 'tlsverify', 'userland-proxy', 'version'];

module.exports.compose_options = [
  'file',
  'project-name',
  'verbose',
  'no-ansi',
  'version',
  'host',
  // TLS
  'tls',
  'tlscacert',
  'tlscert',
  'tlskey',
  'tlsverify',
  'skip-hostname-check',
  'project-directory'
];

module.exports.opts = function(options) {
  var option, opts, value;
  opts = (function() {
    var i, len, ref, results;
    ref = module.exports[!options.compose ? 'options' : 'compose_options'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      value = options[option];
      if (value == null) {
        continue;
      }
      if (value === true) {
        value = 'true';
      }
      if (value === false) {
        value = 'false';
      }
      if (option === 'tlsverify') {
        results.push(`--${option}`);
      } else {
        results.push(`--${option}=${value}`);
      }
    }
    return results;
  })();
  return opts.join(' ');
};

/*
Build the docker command
Accepted options are referenced in "module.exports.options". Also accept 
"machine" and "boot2docker".
`compose` option allow to wrap the command for docker-compose instead of docker
*/
module.exports.wrap = function(options, cmd) {
  var docker, exe, opts;
  docker = {};
  // options.compose ?= false
  if (options.docker == null) {
    options.docker = {};
  }
  opts = module.exports.opts(options);
  exe = options.compose ? 'bin_compose' : 'bin_docker';
  return `export SHELL=/bin/bash\nexport PATH=/opt/local/bin/:/opt/local/sbin/:/usr/local/bin/:/usr/local/sbin/:$PATH\nbin_boot2docker=$(command -v boot2docker)\nbin_docker=$(command -v docker)\nbin_machine=$(command -v docker-machine)\nbin_compose=$(command -v docker-compose)\nmachine='${options.machine || ''}'\nboot2docker='${(options.boot2docker ? '1' : '')}'\ndocker=''\nif [[ $machine != '' ]] && [ $bin_machine ]; then\n  if [ -z "${options.machine || ''}" ]; then exit 5; fi\n  if docker-machine status "\${machine}" | egrep 'Stopped|Saved'; then\n    docker-machine start "\${machine}";\n  fi\n  #docker="eval \\$(\\\${bin_machine} env \${machine}) && $${exe}"\n  eval "$(\${bin_machine} env \${machine})"\nelif [[ $boot2docker != '1' ]] && [  $bin_boot2docker ]; then\n  #docker="eval \\$(\\\${bin_boot2docker} shellinit) && $${exe}"\n  eval "$(\${bin_boot2docker} shellinit)"\nfi\n$${exe} ${opts} ${cmd}`;
};

// Reformat error message if any
// TODO: rename this function as format_error
module.exports.callback = function(err, {stderr}) {
  if (err && string.lines(stderr.trim()).length === 1) {
    throw Error(stderr.trim());
  }
  if (err && /^Error response from daemon/.test(stderr)) {
    throw Error(stderr.trim().replace('Error response from daemon: ', ''));
  }
};
