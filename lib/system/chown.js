// Generated by CoffeeScript 2.3.1
// # `nikita.system.chown(options, [callback])`

// Change the ownership of a file or a directory.

// ## Options

// * `gid`   
//   Group name or id who owns the target file.   
// * `stats` (Stat instance, optional)   
//   Pass the Stats object relative to the target file or directory, to be
//   used as an optimization, discovered otherwise.   
// * `target`   
//   Where the file or directory is copied.   
// * `uid`   
//   User name or id who owns the target file.   

// ## Callback Parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   Value is "true" if file ownership was created or modified.   

// ## Example

// ```js
// require('nikita').system.chown({
//   target: '~/my/project',
//   uid: 'my_user'
//   gid: 'my_group'
// }, function(err, modified){
//   console.log(err ? err.message : 'File was modified: ' + modified);
// });
// ```

// ## Note

// To list all files owner by a user or a uid, run:

// ```bash
// find /var/tmp -user `whoami`
// find /var/tmp -uid 1000
// find / -uid $old_uid -print | xargs chown $new_uid:$new_gid
// ```

// ## Source Code
module.exports = function(options) {
  var ssh;
  this.log({
    message: "Entering chown",
    level: 'DEBUG',
    module: 'nikita/lib/system/chown'
  });
  if (options.stat) {
    console.log('Deprecated Option: receive options.stat instead of options.stats in system.chown');
    options.stats = options.stat;
  }
  // SSH connection
  ssh = this.ssh(options.ssh);
  if (options.argument != null) {
    // Normalize options
    options.target = options.argument;
  }
  if (options.uid === false) {
    options.uid = null;
  }
  if (options.gid === false) {
    options.gid = null;
  }
  if (options.target == null) {
    // Validate parameters
    throw Error("Missing target option");
  }
  if (!((options.uid != null) || (options.gid != null))) {
    throw Error("Missing one of uid or gid option");
  }
  // Convert user and group names to uid and gid if necessary
  this.system.uid_gid({
    uid: options.uid,
    gid: options.gid,
    shy: true
  }, function(err, {status, uid, gid}) {
    options.uid = uid;
    return options.gid = gid;
  });
  // Use option 'stat' short-circuit or discover
  this.call({
    unless: !!options.stats
  }, function(_, callback) {
    this.log({
      message: `Stat ${options.target}`,
      level: 'DEBUG',
      module: 'nikita/lib/chown'
    });
    return this.fs.stat({
      ssh: options.ssh,
      target: options.target
    }, function(err, {stats}) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return callback(Error(`Target Does Not Exist: ${JSON.stringify(options.target)}`));
      }
      if (err) {
        return callback(err);
      }
      options.stats = stats;
      return callback();
    });
  });
  // Detect changes
  this.call(function(_, callback) {
    if (((options.uid == null) || options.stats.uid === options.uid) && ((options.gid == null) || options.stats.gid === options.gid)) {
      this.log({
        message: `Matching ownerships on '${options.target}'`,
        level: 'INFO',
        module: 'nikita/lib/chown'
      });
      return callback();
    }
    return callback(null, true);
  });
  // Apply changes
  return this.call({
    if: (function() {
      return this.status(-1);
    })
  }, function(_, callback) {
    if (options.uid == null) {
      options.uid = options.stats.uid;
    }
    if (options.gid == null) {
      options.gid = options.stats.gid;
    }
    return this.fs.chown({
      ssh: options.ssh,
      target: options.target,
      uid: options.uid,
      gid: options.gid,
      sudo: options.sudo
    }, function(err) {
      if (options.stats.uid === !options.uid) {
        this.log({
          message: `change uid from ${options.stats.uid} to ${options.uid}`,
          level: 'WARN',
          module: 'nikita/lib/chown'
        });
      }
      if (options.stats.gid === !options.gid) {
        this.log({
          message: `change gid from ${options.stats.gid} to ${options.gid}`,
          level: 'WARN',
          module: 'nikita/lib/chown'
        });
      }
      return callback(err);
    });
  });
};
