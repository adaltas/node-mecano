// Generated by CoffeeScript 2.3.1
// # `nikita.system.discover(options, [callback])`

// Discover the OS.
// For now it only supports Centos/Redhat OS in version 6 or 7, ubuntu.
// Store properties in the nikita store object.

// ## Options

// * `strict` (boolean)   
//   Throw an error if the OS is not supported. false by default.   
// * `cache`   
//   Enable cache, "false" by default.   

// ## Callback parameters

// * `err`   
//   Error object if any.   
// * `status`   
//   True if information was fetch from system, false if retrieved from cache.   
// * `info`   
//   List of info about system   

// ## Example

// ```javascript
// nikita.system.discover({
//   ssh: ssh
// }, function(err, status, info){
//   console.log(err || 'Use cache: ' + status);
//   console.log(err || 'System: ' + info.type);     // eg "redhat" or "centos"
//   console.log(err || 'Release: ' + info.release); // eg "6" or "7"
// });
// ```

// ## Source Code
var string;

module.exports = {
  shy: true,
  handler: function(options, callback) {
    var detected, os;
    detected = false;
    os = {};
    os.type = null;
    os.release = null;
    if (options.strict == null) {
      options.strict = false;
    }
    if (options.cache == null) {
      options.cache = false;
    }
    if (options.cache && this.store['nikita:system:type']) {
      return callback(null, {
        status: false,
        type: this.store['nikita:system:type'],
        release: this.store['nikita:system:release']
      });
    }
    this.system.execute({
      cmd: 'cat /etc/redhat-release',
      if_exec: "cat /etc/redhat-release | egrep '(Red\\sHat)|(CentOS)'",
      unless: this.store['nikita:system:type'] != null
    }, function(err, status, stdout, stderr) {
      var line, ref, splits;
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      [line] = string.lines(stdout);
      //might only redhat for centos/redhat
      if (/^CentOS/.test(line)) {
        os.type = 'centos';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (/^Red\sHat/.test(line)) {
        os.type = 'redhat';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (/^Oracle/.test(line)) {
        os.type = 'oracle';
        splits = line.split(' ');
        os.release = splits[splits.indexOf('release') + 1];
      }
      if (options.cache) {
        this.store['nikita:system:type'] = os.type;
        this.store['nikita:system:release'] = os.release;
      }
      if (options.strict && ((ref = os.type) !== 'redhat' && ref !== 'centos' && ref !== 'oracle')) {
        throw Error('OS not supported');
      }
    });
    this.system.execute({
      cmd: ". /etc/lsb-release\necho \"$DISTRIB_ID,$DISTRIB_RELEASE\"",
      if_exec: "cat /etc/lsb-release | egrep 'Ubuntu'",
      unless: function() {
        return this.store['nikita:system:type'] != null;
      }
    }, function(err, status, stdout, stderr) {
      var distrib_id, distrib_release, ref;
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      [distrib_id, distrib_release] = stdout.trim().split(',');
      //backward compatibilty remove 'nikita:system:type'
      os.type = distrib_id.toLowerCase();
      os.release = distrib_release;
      if (options.cache) {
        this.store['nikita:system:type'] = os.type;
        this.store['nikita:system:release'] = os.release;
      }
      if (options.strict && ((ref = os.type) !== 'ubuntu')) {
        throw Error('OS not supported');
      }
    });
    return this.next(function(err, status) {
      return callback(err, {
        status: status,
        type: os.type,
        release: os.release
      });
    });
  }
};

// ## Dependencies
string = require('../misc/string');
