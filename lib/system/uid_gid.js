// Generated by CoffeeScript 2.3.1
// # `nikita.uid_gid(options, callback)`

// Normalize the "uid" and "gid" options. A username defined by the "uid" option will
// be converted to a Unix user ID and a group defined by the "gid" option will
// be converted to a Unix group ID.    

// At the moment, this only work with Unix username because it only read the
// "/etc/passwd" file. A future implementation might execute a system command to
// retrieve information from external identity provideds.   

// ## Options

// * `cache` (boolean)   
//   Cache the result inside the store.
// * `group_target` (string)   
//   Path to the group definition file, default to "/etc/group".
// * `passwd_target` (string)   
//   Path to the passwd definition file, default to "/etc/passwd".
// * `uid` (string|integer)   
//   Convert the user name to a Unix ID.
// * `gid` (string|integer)   
//   Convert the group name to a Unix ID.

// ## Exemple

// ```js
// require('nikita').system.uid_gid({
//   uid: 'myuser',
//   gid: 'mygroup'
// }, function(err, {status, uid, gid}){
//   console.log(options.uid)
//   console.log(options.gid)
// })
// ```

// ## Source Code
module.exports = {
  handler: function(options, callback) {
    if (typeof options.uid === 'string' && /\d+/.test(options.uid)) {
      options.uid = parseInt(options.uid, 10);
    }
    if (typeof options.gid === 'string' && /\d+/.test(options.gid)) {
      options.gid = parseInt(options.gid, 10);
    }
    this.file.types.etc_passwd.read({
      if: options.uid && typeof options.uid === 'string',
      target: options.passwd_target,
      uid: options.uid,
      shy: false
    }, function(err, {status, user}) {
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      options.uid = user.uid;
      return options.default_gid = user.gid;
    });
    this.file.types.etc_group.read({
      if: options.gid && typeof options.gid === 'string',
      target: options.group_target,
      gid: options.gid,
      shy: false
    }, function(err, {status, group}) {
      if (err) {
        throw err;
      }
      if (!status) {
        return;
      }
      return options.gid = group.gid;
    });
    return this.next(function(err, {status}) {
      return callback(err, {
        status: status,
        uid: options.uid,
        gid: options.gid,
        default_gid: options.default_gid
      });
    });
  }
};
