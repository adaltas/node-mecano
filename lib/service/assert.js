// Generated by CoffeeScript 2.3.1
// # `nikita.service(options, [callback])`

// Assert service information and status.

// The option "action" takes 3 possible values: "start", "stop" and "restart". A 
// service will only be restarted if it leads to a change of status. Set the value 
// to "['start', 'restart']" to ensure the service will be always started.

// ## Options

// * `arch_chroot` (boolean|string)   
//   Run this command inside a root directory with the arc-chroot command or any
//   provided string, require the "rootdir" option if activated.
// * `name` (string)   
//   Package name, required.
// * `srv_name` (string)   
//   Name used by the service utility, default to "name".
// * `installed`   
//   Assert the package is installeds.
// * `rootdir` (string)   
//   Path to the mount point corresponding to the root directory, required if
//   the "arch_chroot" option is activated.

// ## Source Code
module.exports = function(options) {
  this.log({
    message: "Entering service.install",
    level: 'DEBUG',
    module: 'nikita/lib/service/install'
  });
  if (typeof options.argument === 'string') {
    // Options
    if (options.name == null) {
      options.name = options.argument;
    }
  }
  if (options.srv_name == null) {
    options.srv_name = options.name;
  }
  if (typeof options.name === 'string') {
    options.name = [options.name];
  }
  if (!options.name) {
    // Validation
    throw Error(`Invalid Name: ${JSON.stringify(options.name)}`);
  }
  // ### Assert a Package is installed
  this.system.execute({
    if: options.installed != null,
    cmd: `if command -v yum >/dev/null 2>&1; then\n  rpm -qa --qf "%{NAME}\n" | grep '^${options.name.join('|')}$'\nelif command -v pacman >/dev/null 2>&1; then\n  pacman -Qqe | grep '^${options.name.join('|')}$'\nelif command -v apt-get >/dev/null 2>&1; then\n  dpkg -l | grep \'^ii\' | awk \'{print $2}\' | grep '^${options.name.join('|')}$'\nelse\n  echo "Unsupported Package Manager" >&2\n  exit 2\nfi`,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir,
    stdin_log: true,
    stdout_log: false,
    shy: true
  }, function(err) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Package Manager");
    }
    if (err) {
      throw Error(`Uninstalled Package: ${options.name}`);
    }
  });
  // ### Assert a Service is started or stopped

  // Note, this doesnt check wether a service is installed or not.
  return this.system.execute({
    if: (options.started != null) || (options.stopped != null),
    cmd: `ls /lib/systemd/system/*.service /etc/systemd/system/*.service /etc/rc.d/* /etc/init.d/* 2>/dev/null | grep -w "${options.srv_name}" || exit 3\nif command -v systemctl >/dev/null 2>&1; then\n  systemctl status ${options.srv_name} || exit 3\nelif command -v service >/dev/null 2>&1; then\n  service ${options.srv_name} status || exit 3\nelse\n  echo "Unsupported Loader" >&2\n  exit 2\nfi`,
    code: 0,
    code_skipped: 3,
    arch_chroot: options.arch_chroot,
    rootdir: options.rootdir
  }, function(err, {status}) {
    if ((err != null ? err.code : void 0) === 2) {
      throw Error("Unsupported Loader");
    }
    if (err) {
      return;
    }
    if (options.started != null) {
      if (options.started && !status) {
        throw Error(`Service Not Started: ${options.srv_name}`);
      }
      if (!options.started && status) {
        throw Error(`Service Started: ${options.srv_name}`);
      }
    }
    if (options.stopped != null) {
      if (options.stopped && status) {
        throw Error(`Service Not Stopped: ${options.srv_name}`);
      }
      if (!options.stopped && !status) {
        throw Error(`Service Stopped: ${options.srv_name}`);
      }
    }
  });
};
