// Generated by CoffeeScript 2.3.1
// # `nikita.wait.exist(options, [callback])`

// Wait for a file or directory to exists. Status will be
// set to "false" if the file already existed, considering that no
// change had occured. Otherwise it will be set to "true".   

// ## Options  

// * `target` (string|array)   
//   Path to a file or directory.    
// * `interval`   
//   Time interval between which we should wait before re-executing the check,
//   default to 2s.     

// Example:

// ```js
// require('nikita')
// .wait.exist({
//   target: "/path/to/file_or_directory"
// }, function(err, status){
//   // Command succeed, the file now exists
// })
// ```

// ## Source Code
var each;

module.exports = function(options, callback) {
  var ssh, status;
  this.log({
    message: "Entering wait.exists",
    level: 'DEBUG',
    module: 'nikita/lib/wait/exist'
  });
  // SSH connection
  ssh = this.ssh(options.ssh);
  status = false;
  if (options.target == null) {
    // Validate parameters
    return callback(Error(`Missing target: ${options.target}`));
  }
  if (!Array.isArray(options.target)) {
    options.target = [options.target];
  }
  if (options.interval == null) {
    options.interval = 2000;
  }
  this.log({
    message: "Entering wait for file",
    level: 'DEBUG',
    module: 'nikita/wait/exist'
  });
  status = false;
  return each(options.target).call((target, next) => {
    var count, run;
    count = 0;
    run = () => {
      count++;
      this.log({
        message: `Attempt #${count}`,
        level: 'INFO',
        module: 'nikita/wait/exist'
      });
      return this.fs.stat({
        ssh: options.ssh,
        target: options.target
      }, function(err) {
        if (err && err.code !== 'ENOENT') {
          return next(err);
        }
        if (err) {
          return setTimeout(run, options.interval);
        }
        this.log({
          message: "Finish wait for file",
          level: 'INFO',
          module: 'nikita/wait/exist'
        });
        if (count > 1) {
          status = true;
        }
        return next();
      });
    };
    return run();
  }).next(function(err) {
    return callback(err, status);
  });
};

each = require('each');
